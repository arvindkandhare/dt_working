# main.py

from vex import *
import time


# Initialize devices
brain = Brain()
controller_1 = Controller(PRIMARY)
left_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)
left_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)
left_motor_c = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)
 
right_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)
right_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_6_1, False)
right_motor_c = Motor(Ports.PORT17, GearSetting.RATIO_6_1, False)
 
left_drive_smart = MotorGroup(left_motor_a, left_motor_b, left_motor_c)
right_drive_smart = MotorGroup(right_motor_a, right_motor_b, right_motor_c)
High_scoring = Motor(Ports.PORT20)
intake_lower = Motor(Ports.PORT21)
intake_upper = Motor(Ports.PORT13)
mogo_p = DigitalOut(brain.three_wire_port.f)
ejection_p = DigitalOut(brain.three_wire_port.a)
ejection_p.set(False)
donker = DigitalOut(brain.three_wire_port.h)
donker.set(False)
intake_p = DigitalOut(brain.three_wire_port.d)
rotational_sensor = Rotation(Ports.PORT19, True)
rotational_sensor.set_position(0, DEGREES)

left_rotational_sensor = Rotation(Ports.PORT7, True)
right_rotational_sensor = Rotation(Ports.PORT6, False)
left_rotational_sensor.set_position(0, DEGREES)
right_rotational_sensor.set_position(0, DEGREES)


# Constants
MSEC_PER_SEC = 1000

# define an enum for intake state
class IntakeState:
    STOPPED = 0
    RUNNING = 1
    STALLED = 2
    FIXINGSTALL = 3

class RingType:
    NONE = 0
    RED = 1
    BLUE = 2

MIN_REJECT_SIZE=5000
# Define the color signatures based of the config copied below
REDD = Signature(1, 9907, 12073, 10990, -1991, -879, -1435, 2.5, 0)
BLUEE = Signature(2, -4415, -3205, -3810, 5461, 8989, 7225, 2.5, 0)
'''{
  "brightness": 50,
  "signatures": [
    {
      "name": "REDD",
      "parameters": {
        "uMin": 9907,
        "uMax": 12073,
        "uMean": 10990,
        "vMin": -1991,
        "vMax": -879,
        "vMean": -1435,
        "rgb": 5973535,
        "type": 0,
        "name": "REDD"
      },
      "range": 2.5
    },
    {
      "name": "BLUEE",
      "parameters": {
        "uMin": -4415,
        "uMax": -3205,
        "uMean": -3810,
        "vMin": 5461,
        "vMax": 8989,
        "vMean": 7225,
        "rgb": 1714760,
        "type": 0,
        "name": "BLUEE"
      },
      "range": 2.5
    }
  ],
  "codes": []
}'''
Color_sensor = Optical(Ports.PORT15)
Color_sensor.set_light_power(100)
# Initialize eject_counter
eject_counter = 0
eject_object = RingType.NONE

intake_state = IntakeState.STOPPED

# Global variables
slow_drive = False
high_scoring_running = False
current_direction = FORWARD
high_scoring_mode = False
# Constants
STALL_THRESHOLD = 0       # Adjust as needed
STALL_COUNT = 20
RETRY_LIMIT = 15
EJECT_LIMIT= 20
MSEC_PER_SEC = 1000
# Define constants for the target angles
HIGH_SCORE_TARGET_ANGLE_SCORE = -430
HIGH_SCORE_TARGET_ANGLE_WAIT = -200
HIGH_SCORE_TARGET_ANGLE_CAPTURE = -60
HIGH_SCORE_TARGET_ANGLE_DOWN = 0
MAX_CAPTURE_POSITION_COUNT = 51
# Global variables
retry_count = 0
consecutive_stall_count = 0
high_scoring_running = False
high_score_stall = False  # Set this accordingly in your main code if needed
high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_DOWN
capture_position_counter = 0

def set_high_score_angle(angle):
    global high_score_target_angle, capture_position_counter
    if (angle == HIGH_SCORE_TARGET_ANGLE_CAPTURE):
        high_score_target_angle = angle
        capture_position_counter = MAX_CAPTURE_POSITION_COUNT
    elif (angle == HIGH_SCORE_TARGET_ANGLE_SCORE) and high_score_target_angle <= angle:
        high_score_target_angle -= 40
    else:
        high_score_target_angle = angle

# Function to set the state of the high scoring motor
def adjust_high_scoring_motor_position():
    global high_score_target_angle, capture_position_counter

    #print(" Rotating angle is " + str(rotational_sensor.position(DEGREES)) + "high score motor angle is " + str(High_scoring.position(DEGREES)))
    High_scoring.set_stopping(BRAKE)
    High_scoring.set_velocity(100, PERCENT)
    if high_score_target_angle == HIGH_SCORE_TARGET_ANGLE_CAPTURE and abs(High_scoring.position(DEGREES) - rotational_sensor.position(DEGREES)) > 2:
        if capture_position_counter > 0:
            capture_position_counter -= 1
        else:
            print("Chaning motor position")
            print(" Rotating angle is " + str(rotational_sensor.position(DEGREES)) + "high score motor angle is " + str(High_scoring.position(DEGREES)))
            High_scoring.set_position(rotational_sensor.position(DEGREES), DEGREES)
    High_scoring.spin_to_position(high_score_target_angle, DEGREES, 30, PERCENT, False)

def auto_adjust_high_scoring_motor_position():
    global high_score_target_angle, capture_position_counter

    stall_detection_and_handling()

    #print(" Rotating angle is " + str(rotational_sensor.position(DEGREES)) + "high score motor angle is " + str(High_scoring.position(DEGREES)))
    High_scoring.set_stopping(BRAKE)
    High_scoring.set_velocity(100, PERCENT)
    if high_score_target_angle == HIGH_SCORE_TARGET_ANGLE_CAPTURE and abs(High_scoring.position(DEGREES) - rotational_sensor.position(DEGREES)) > 2:
        if capture_position_counter > 0:
            capture_position_counter -= 1
        else:
            print("Chaning motor position")
            print(" Rotating angle is " + str(rotational_sensor.position(DEGREES)) + "high score motor angle is " + str(High_scoring.position(DEGREES)))
            High_scoring.set_position(rotational_sensor.position(DEGREES), DEGREES)
    High_scoring.spin_to_position(high_score_target_angle, DEGREES, 30, PERCENT, False)
    while (High_scoring.position(DEGREES) != high_score_target_angle):
        stall_detection_and_handling()

# Function to set the state of the intake motor
def set_intake_motor_state(direction=FORWARD):
    global intake_state, current_direction, eject_counter, high_score_stall
    if intake_state == IntakeState.RUNNING or intake_state == IntakeState.FIXINGSTALL:
        intake_lower.set_velocity(90, PERCENT)
        intake_upper.set_velocity(80, PERCENT)
        intake_lower.spin(direction)
        if intake_state == IntakeState.FIXINGSTALL:
            if not high_score_stall:
                print("Intake motor state is fixing stall")
                intake_upper.spin(direction)
            else:
                high_score_stall = False
                print("Just stopping as this is high scoring stall " + str(direction))
                intake_upper.stop()
        else:
            intake_upper.spin(REVERSE if direction == FORWARD else FORWARD)
        current_direction = direction
    else:
        intake_lower.stop()
        intake_upper.stop()

# Stall detection and handling for the intake motor
def stall_detection_and_handling():
    global intake_state, consecutive_stall_count, retry_count, high_score_stall, high_score_target_angle, high_scoring_running, eject_counter
    global current_direction
    if intake_state == IntakeState.RUNNING or intake_state == IntakeState.STALLED:
        if intake_state == IntakeState.RUNNING and eject_counter > 0:
                eject_counter = eject_counter - 1
                #print("Decremeting eject counter " + str(eject_counter))
                if eject_counter == 0:
                    #print("stopping the motor momentarily")
                    intake_state = IntakeState.STOPPED
                    set_intake_motor_state(current_direction)
                    wait(100, MSEC)
                    #intake_state = IntakeState.RUNNING
                    #set_intake_motor_state(current_direction)
        current_velocity = intake_upper.velocity(PERCENT)
        if abs(current_velocity) <= STALL_THRESHOLD:
            #print("Stalled" + str(consecutive_stall_count))
            consecutive_stall_count += 1
        else:
            consecutive_stall_count = 0

        if consecutive_stall_count >= STALL_COUNT:
            print("Unstaling")
            intake_state = IntakeState.FIXINGSTALL
            # This state will change upper motor in opposite direction
            set_intake_motor_state(current_direction)
            if high_scoring_running:
                print("High scoring stall setting it true")
                high_score_stall = True
                set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
                adjust_high_scoring_motor_position()
            consecutive_stall_count = 0
            retry_count = RETRY_LIMIT
    else:
        consecutive_stall_count = 0
    if intake_state == IntakeState.FIXINGSTALL:
        if retry_count == 0:
            if high_score_stall:
                print("Stoppping because of high stall")
                intake_state = IntakeState.STOPPED
                set_intake_motor_state(FORWARD)
            else:
                print("Fixed")
                intake_state = IntakeState.RUNNING
                set_intake_motor_state(current_direction)
        else:
            #print("Retrying")
            retry_count -= 1


# wait for rotation sensor to fully initialize
wait(30, MSEC)


#Paths
red_left_tomogo = [(-151.774, 126.162), (-146.975, 127.301), (-142.079, 126.393), (-137.475, 124.457), (-133.118, 122.009), (-128.948, 119.253), (-124.916, 116.296), (-121.0, 113.188), (-117.168, 109.976), (-113.407, 106.682), (-109.703, 103.323), (-106.048, 99.911), (-102.43, 96.461), (-98.847, 92.974), (-95.288, 89.461), (-91.75, 85.929), (-88.228, 82.379), (-84.715, 78.821), (-81.208, 75.258), (-77.699, 71.695), (-74.183, 68.141), (-70.649, 64.603), (-67.087, 61.094), (-62.038, 56.275), (-62.038, 56.275)]
red_left_tofirststack = [(-66.948, 66.505), (-64.771, 81.588), (-63.049, 96.73), (-60.55, 111.758), (-59.156, 118.226), (-59.156, 118.226)]
red_left_totower = [(-56.005, 109.686), (-55.187, 107.861), (-54.426, 106.011), (-53.718, 104.141), (-53.062, 102.251), (-52.459, 100.345), (-51.91, 98.421), (-51.418, 96.483), (-50.985, 94.531), (-50.614, 92.565), (-50.31, 90.589), (-50.077, 88.602), (-49.92, 86.609), (-49.844, 84.61), (-49.855, 82.611), (-49.96, 80.614), (-50.165, 78.624), (-50.476, 76.649), (-50.898, 74.694), (-51.438, 72.769), (-52.099, 70.882), (-52.883, 69.042), (-53.793, 67.261), (-54.822, 65.547), (-55.972, 63.912), (-56.915, 62.728), (-56.915, 62.728)]
red_left_lasttwo = [(-48.378, 156.517), (-46.712, 155.41), (-45.102, 154.225), (-43.546, 152.968), (-42.048, 151.643), (-40.605, 150.258), (-39.218, 148.818), (-37.888, 147.324), (-36.613, 145.783), (-35.396, 144.196), (-34.235, 142.568), (-33.131, 140.901), (-32.085, 139.196), (-31.096, 137.458), (-30.168, 135.687), (-29.298, 133.886), (-28.488, 132.057), (-27.742, 130.202), (-27.057, 128.323), (-26.436, 126.422), (-25.882, 124.5), (-25.394, 122.561), (-24.973, 120.606), (-24.622, 118.637), (-24.343, 116.656), (-24.136, 114.667), (-24.002, 112.672), (-23.943, 110.673), (-23.962, 108.673), (-24.057, 106.676), (-24.229, 104.683), (-24.479, 102.699), (-24.811, 100.727), (-25.221, 98.769), (-25.709, 96.83), (-26.274, 94.912), (-26.917, 93.018), (-27.635, 91.152), (-28.427, 89.316), (-29.292, 87.512), (-30.227, 85.744), (-31.23, 84.014), (-32.298, 82.323), (-33.428, 80.673), (-34.149, 79.681), (-34.149, 79.681)]
first_red_left_4 = [(-38.418, 106.242), (-38.361, 108.24), (-38.381, 110.238), (-38.496, 112.234), (-38.698, 114.222), (-39.011, 116.196), (-39.423, 118.152), (-39.944, 120.081), (-40.582, 121.976), (-41.329, 123.829), (-42.187, 125.634), (-43.158, 127.381), (-44.235, 129.065), (-45.408, 130.682), (-46.672, 132.231), (-48.025, 133.702), (-49.454, 135.1), (-50.949, 136.426), (-52.506, 137.679), (-54.118, 138.861), (-55.775, 139.979), (-57.476, 141.029), (-59.211, 142.021), (-60.978, 142.955), (-62.773, 143.836), (-64.591, 144.665), (-66.43, 145.448), (-68.289, 146.184), (-70.162, 146.882), (-72.05, 147.538), (-73.95, 148.159), (-75.861, 148.747), (-77.782, 149.301), (-79.711, 149.825), (-81.647, 150.323), (-83.589, 150.793), (-85.538, 151.238), (-87.492, 151.66), (-89.45, 152.061), (-91.413, 152.442), (-93.379, 152.802), (-95.349, 153.144), (-97.321, 153.469), (-99.296, 153.778), (-101.273, 154.071), (-103.252, 154.351), (-105.234, 154.617), (-107.217, 154.87), (-109.201, 155.11), (-111.187, 155.339), (-113.174, 155.557), (-115.162, 155.765), (-117.151, 155.964), (-119.141, 156.153), (-121.132, 156.334), (-123.123, 156.507), (-125.115, 156.672), (-127.108, 156.831), (-129.101, 156.982), (-131.095, 157.127), (-133.089, 157.266), (-135.084, 157.4), (-137.079, 157.528), (-139.074, 157.652), (-141.069, 157.771), (-143.065, 157.886), (-145.061, 157.998), (-147.057, 158.106), (-149.053, 158.21), (-151.049, 158.312), (-153.046, 158.411), (-155.043, 158.507), (-157.039, 158.602), (-159.036, 158.694), (-161.033, 158.785), (-163.03, 158.875), (-165.027, 158.964), (-167.024, 159.051), (-169.021, 159.139), (-171.018, 159.225), (-171.42, 159.243), (-171.42, 159.243)]
red_left_back_4 = [(-171.42, 159.243), (-169.42, 159.268), (-167.42, 159.293), (-165.42, 159.318), (-163.42, 159.342), (-161.42, 159.365), (-159.42, 159.387), (-157.42, 159.408), (-155.421, 159.428), (-153.421, 159.446), (-151.421, 159.463), (-149.421, 159.479), (-147.421, 159.492), (-145.421, 159.503), (-143.421, 159.511), (-141.421, 159.516), (-139.421, 159.516), (-137.421, 159.513), (-135.421, 159.505), (-133.421, 159.493), (-131.421, 159.476), (-129.421, 159.455), (-127.421, 159.433), (-125.421, 159.41), (-123.422, 159.387), (-121.422, 159.366), (-119.422, 159.346), (-117.422, 159.329), (-115.422, 159.313), (-113.422, 159.299), (-111.422, 159.287), (-109.422, 159.277), (-107.422, 159.269), (-105.422, 159.261), (-103.422, 159.256), (-101.422, 159.251), (-99.422, 159.247), (-97.422, 159.245), (-95.422, 159.243), (-92.961, 159.243), (-92.961, 159.243)]

blue_right_tomogo = [(abs(x), y) for x, y, *_ in red_left_tomogo]
blue_right_tofirststack = [(abs(x), y) for x, y, *_ in red_left_tofirststack]
blue_right_totower = [(abs(x), y) for x, y, *_ in red_left_totower]
blue_right_lasttwo = [(abs(x), y) for x, y, *_ in red_left_lasttwo]
first_blue_right_4 =[(abs(x), y) for x, y, *_ in first_red_left_4]
blue_right_back_4 = [(abs(x), y) for x, y, *_ in red_left_back_4]

blue_left_tomogo = [(abs(x), -y) for x, y, *_ in red_left_tomogo]
blue_left_tofirststack = [(abs(x), -y) for x, y, *_ in red_left_tofirststack]
blue_left_totower = [(abs(x), -y) for x, y, *_ in red_left_totower]
blue_left_lasttwo = [(abs(x), -y) for x, y, *_ in red_left_lasttwo]
first_blue_left_4 =[(abs(x), -y) for x, y, *_ in first_red_left_4]
blue_left_back_4 = [(abs(x), -y) for x, y, *_ in red_left_back_4]

red_right_tomogo = [((x), -y) for x, y, *_ in red_left_tomogo]
red_right_tofirststack = [((x), -y) for x, y, *_ in red_left_tofirststack]
red_right_totower = [((x), -y) for x, y, *_ in red_left_totower]
red_right_lasttwo = [((x), -y) for x, y, *_ in red_left_lasttwo]
first_red_right_4 =[((x), -y) for x, y, *_ in first_red_left_4]
red_right_back_4 = [((x), -y) for x, y, *_ in red_left_back_4]


# Testing paths
decreasing_x = [(150,00),(100,0), (50,0), (0,0)]
#increasing_x = increasing_x_points = [(x, 0) for x in range(0, 200, 10)]

#[(-66.948, 66.505), (-65.755, 81.698), (-63.714, 96.795), (-60.605, 111.714), (-59.156, 118.226), (-59.156, 118.226)]
#[(-66.948, 66.505), (-74.311, 79.794), (-75.997, 94.745), (-69.597, 108.353), (-59.156, 118.226), (-59.156, 118.226)]
#red_left_tofirststack = [ (-59.156, 118.226)]
start_pos_size = -1

p1redright = [(-161.178, -60.913), (-159.178, -60.896), (-157.178, -60.878), (-155.178, -60.861), (-153.178, -60.843)] # ,(-151.178, -60.826), (-149.178, -60.808), (-147.178, -60.791),(-145.178, -60.773), (-143.178, -60.756), (-141.179, -60.738), (-139.179, -60.72), (-137.179, -60.703), (-135.179, -60.685), (-133.179, -60.668), (-131.179, -60.65), (-129.179, -60.633), (-127.179, -60.615), (-125.179, -60.598), (-123.179, -60.58), (-121.179, -60.563), (-119.179, -60.545), (-117.179, -60.527), (-115.18, -60.51), (-113.18, -60.492)
p2redright = [(-102.342, -58.793), (-100.343, -58.837), (-98.343, -58.881), (-96.344, -58.925), (-94.344, -58.969), (-92.345, -59.013), (-90.345, -59.057), (-88.346, -59.101), (-86.346, -59.145), (-84.347, -59.189), (-82.347, -59.233), (-80.347, -59.277), (-78.348, -59.321), (-76.348, -59.364), (-74.349, -59.408), (-72.349, -59.452), (-70.35, -59.496), (-68.35, -59.54), (-66.351, -59.584), (-64.351, -59.628), (-62.352, -59.672), (-60.352, -59.716), (-58.353, -59.76), (-56.353, -59.804), (-54.108, -59.853), (-54.108, -59.853)]
p3redright = [(-54.108, -59.853), (-54.267, -61.847), (-54.427, -63.84), (-54.586, -65.834), (-54.746, -67.828), (-54.905, -69.821), (-55.065, -71.815), (-55.224, -73.808), (-55.384, -75.802), (-55.543, -77.796), (-55.703, -79.789), (-55.862, -81.783), (-56.022, -83.777), (-56.181, -85.77), (-56.341, -87.764), (-56.5, -89.757), (-56.66, -91.751), (-56.819, -93.745), (-56.979, -95.738), (-57.138, -97.732), (-57.298, -99.726), (-57.457, -101.719), (-57.616, -103.713), (-57.776, -105.707), (-57.935, -107.7), (-58.095, -109.694), (-58.254, -111.687), (-58.414, -113.681), (-58.573, -115.675), (-58.733, -117.668), (-58.892, -119.662), (-59.052, -121.656), (-59.211, -123.649), (-59.408, -126.11), (-59.408, -126.11)]
p4redright = [(-59.408, -126.11), (-58.758, -144.674), (-60.758, -144.688), (-62.758, -144.701), (-64.758, -144.714), (-66.758, -144.727), (-68.758, -144.741), (-70.758, -144.754), (-72.758, -144.767), (-74.758, -144.78), (-76.758, -144.794), (-78.758, -144.807), (-80.757, -144.82), (-82.757, -144.833), (-84.757, -144.847), (-86.757, -144.86), (-88.757, -144.873), (-90.757, -144.886), (-92.757, -144.9), (-94.757, -144.913), (-96.757, -144.926), (-98.757, -144.939), (-100.757, -144.953), (-102.757, -144.966), (-104.757, -144.979), (-106.757, -144.992), (-108.757, -145.006), (-110.757, -145.019), (-112.757, -145.032), (-114.757, -145.045), (-116.757, -145.059), (-118.757, -145.072), (-120.757, -145.085), (-122.757, -145.098), (-124.757, -145.112), (-126.756, -145.125), (-128.756, -145.138), (-130.756, -145.151)] # , (-132.756, -145.165), (-134.756, -145.178), (-136.795, -145.191), (-136.795, -145.191)
#p5redright = [(-136.795, -145.191), (-134.83, -144.819), (-132.865, -144.447), (-130.9, -144.074), (-128.935, -143.702), (-126.97, -143.33), (-125.005, -142.958), (-123.04, -142.586), (-121.075, -142.213), (-119.109, -141.841), (-117.144, -141.469), (-115.179, -141.097), (-113.214, -140.724), (-111.249, -140.352), (-109.284, -139.98), (-107.319, -139.608), (-105.354, -139.236), (-103.389, -138.863), (-101.424, -138.491), (-99.459, -138.119), (-97.494, -137.747), (-95.529, -137.375), (-93.564, -137.002), (-91.599, -136.63), (-89.634, -136.258), (-87.669, -135.886), (-85.703, -135.513), (-83.738, -135.141), (-81.773, -134.769), (-79.808, -134.397), (-77.843, -134.025), (-75.878, -133.652), (-73.913, -133.28), (-71.948, -132.908), (-69.983, -132.536), (-68.018, -132.164), (-66.053, -131.791), (-64.088, -131.419), (-62.123, -131.047), (-60.158, -130.675), (-58.193, -130.302), (-56.228, -129.93), (-54.263, -129.558), (-52.297, -129.186), (-50.332, -128.814), (-48.367, -128.441), (-46.402, -128.069), (-44.437, -127.697), (-42.472, -127.325), (-40.507, -126.953)] #, (-38.542, -126.58), (-36.577, -126.208), (-34.612, -125.836), (-31.788, -125.301), (-31.788, -125.301)
#p6redright = [(-40.507, -126.953), (-42.047, -125.676), (-43.586, -124.4), (-45.126, -123.123), (-46.665, -121.846), (-48.205, -120.57), (-49.744, -119.293), (-51.284, -118.017), (-52.823, -116.74), (-54.363, -115.463), (-55.902, -114.187), (-57.442, -112.91), (-58.982, -111.633), (-60.521, -110.357), (-62.061, -109.08), (-63.6, -107.803), (-65.14, -106.527), (-66.679, -105.25), (-68.219, -103.974), (-69.758, -102.697), (-71.298, -101.42), (-72.837, -100.144), (-74.377, -98.867), (-75.917, -97.59), (-77.456, -96.314), (-78.996, -95.037), (-80.535, -93.76), (-82.075, -92.484), (-83.614, -91.207), (-85.154, -89.931), (-86.693, -88.654), (-88.233, -87.377), (-89.772, -86.101), (-91.312, -84.824), (-92.851, -83.547), (-94.391, -82.271), (-95.931, -80.994), (-97.47, -79.717), (-99.01, -78.441), (-99.692, -77.875), (-99.692, -77.875)]
p7redright = [(-130.756, -145.151), (-129.439, -143.646), (-128.123, -142.14), (-126.806, -140.635), (-125.489, -139.129), (-124.173, -137.624), (-122.856, -136.118), (-121.539, -134.613), (-120.223, -133.107), (-118.906, -131.602), (-117.589, -130.097), (-116.272, -128.591), (-114.956, -127.086), (-113.639, -125.58), (-112.322, -124.075), (-111.006, -122.569), (-109.689, -121.064), (-108.372, -119.559), (-107.056, -118.053), (-105.739, -116.548), (-104.422, -115.042), (-103.106, -113.537), (-101.789, -112.031), (-100.472, -110.526), (-99.156, -109.02), (-97.839, -107.515), (-96.522, -106.01), (-95.206, -104.504), (-93.889, -102.999), (-92.572, -101.493), (-91.256, -99.988), (-89.939, -98.482), (-88.622, -96.977), (-87.305, -95.472), (-85.989, -93.966), (-84.672, -92.461), (-83.355, -90.955), (-82.039, -89.45), (-80.722, -87.944), (-79.405, -86.439), (-78.089, -84.933), (-76.772, -83.428), (-75.455, -81.923), (-74.139, -80.417), (-72.822, -78.912), (-71.505, -77.406), (-70.189, -75.901), (-68.872, -74.395), (-67.555, -72.89), (-66.239, -71.384), (-64.922, -69.879), (-63.605, -68.374), (-62.289, -66.868), (-60.972, -65.363), (-59.655, -63.857), (-58.338, -62.352), (-57.022, -60.846), (-55.705, -59.341), (-54.388, -57.836), (-53.072, -56.33), (-51.755, -54.825), (-50.438, -53.319), (-49.122, -51.814)] #, (-47.805, -50.308), (-46.488, -48.803), (-45.172, -47.297), (-43.855, -45.792), (-42.538, -44.287), (-41.222, -42.781), (-39.905, -41.276), (-38.588, -39.77), (-37.146, -38.121), (-37.146, -38.121)
#p6redright = [(-31.788, -125.301), (-31.804, -123.301), (-31.819, -121.301), (-31.835, -119.301), (-31.85, -117.301), (-31.866, -115.301), (-31.881, -113.301), (-31.897, -111.301), (-31.912, -109.301), (-31.928, -107.302), (-31.944, -105.302), (-31.959, -103.302), (-31.975, -101.302), (-31.99, -99.302), (-32.006, -97.302), (-32.021, -95.302), (-32.037, -93.302), (-32.052, -91.302), (-32.068, -89.302), (-32.084, -87.302), (-32.099, -85.302), (-32.115, -83.302), (-32.13, -81.302), (-32.146, -79.302), (-32.161, -77.302), (-32.177, -75.303), (-32.193, -73.303), (-32.208, -71.303), (-32.224, -69.303), (-32.239, -67.303), (-32.255, -65.303), (-32.27, -63.303), (-32.286, -61.303), (-32.301, -59.303), (-32.317, -57.303), (-32.333, -55.303), (-32.348, -53.303), (-32.364, -51.303), (-32.375, -49.782), (-32.375, -49.782)]

p1blueleft = [(abs(x), y) for x, y, *_ in p1redright]
p2blueleft = [(abs(x), y) for x, y, *_ in p2redright]
p3blueleft = [(abs(x), y) for x, y, *_ in p3redright]
p4blueleft = [(abs(x), y) for x, y, *_ in p4redright]
p7blueleft = [(abs(x), y) for x, y, *_ in p7redright]




#-----------------------------------------------------------------------------------------------------------------------------------------------------
#SKILLS
alliance_stake = [(-159.385, 0.0), (-157.385, 0.0), (-155.385, 0.0), (-153.385, 0.0), (-151.385, 0.0), (-149.385, 0.0), (-147.385, 0.0), (-145.385, 0.0), (-143.385, 0.0), (-141.385, 0.0), (-139.385, 0.0), (-137.385, 0.0), (-135.385, 0.0), (-133.385, 0.0), (-131.385, 0.0), (-120.483, 0), (-110, 0), (-100, 0)]
#alliance stake changed because it was bumping into the hanging wall and we made it shorter
grabbing_mogo = [(-120.483, 5.068), (-120.451, 7.067), (-120.419, 9.067), (-120.387, 11.067), (-120.355, 13.067), (-120.323, 15.066), (-120.291, 17.066), (-120.259, 19.066), (-120.227, 21.066), (-120.195, 23.065), (-120.163, 25.065), (-120.131, 27.065), (-120.099, 29.065), (-120.067, 31.064), (-120.035, 33.064), (-120.003, 35.064), (-119.971, 37.064), (-119.939, 39.063), (-119.907, 41.063), (-119.875, 43.063), (-119.843, 45.063), (-119.811, 47.062), (-119.779, 49.062), (-119.747, 51.062), (-119.715, 53.062), (-119.683, 55.061), (-119.651, 57.061), (-119.619, 59.061), (-119.587, 61.061), (-119.555, 63.06), (-119.523, 65.06), (-119.491, 67.06), (-119.468, 68.533), (-119.468, 68.533)]


p1v2 = [(-159.385, 0.0), (-157.385, 0.0), (-155.385, 0.0), (-153.385, 0.0), (-151.385, 0.0), (-149.385, 0.0), (-147.385, 0.0), (-145.385, 0.0), (-143.385, 0.0), (-141.385, 0.0), (-139.385, 0.0), (-137.385, 0.0), (-135.385, 0.0), (-133.385, 0.0), (-131.385, 0.0)]

mogo_in_possession_1v2 = [(-119.894, 0.0), (-119.894, 2.0), (-119.894, 4.0), (-119.894, 6.0), (-119.894, 8.0), (-119.894, 10.0), (-119.894, 12.0), (-119.894, 14.0), (-119.894, 16.0), (-119.894, 18.0), (-119.894, 20.0), (-119.894, 22.0), (-119.894, 24.0), (-119.894, 26.0), (-119.894, 28.0), (-119.894, 30.0), (-119.894, 32.0), (-119.894, 34.0), (-119.894, 36.0), (-119.894, 38.0), (-119.894, 40.0), (-119.894, 42.0), (-119.894, 44.0), (-119.894, 46.0), (-119.894, 48.0), (-119.894, 50.0), (-119.894, 52.0), (-119.894, 54.0), (-119.894, 56.0), (-119.894, 58.0), (-119.894, 60.0), (-119.894, 62.0), (-119.894, 64.0), (-119.894, 66.0), (-119.894, 68.0), (-119.894, 70.0)]



first_double_donuts = [(-119.345, 59.459), (-117.346, 59.529), (-115.347, 59.599), (-113.349, 59.669), (-111.35, 59.738), (-109.351, 59.808), (-107.352, 59.878), (-105.354, 59.948), (-103.355, 60.018), (-101.356, 60.088), (-99.357, 60.158), (-97.358, 60.228), (-95.36, 60.298), (-93.361, 60.368), (-91.362, 60.438), (-89.363, 60.508), (-87.365, 60.578), (-85.366, 60.648), (-83.367, 60.718), (-81.368, 60.788), (-79.369, 60.858), (-77.371, 60.928), (-75.372, 60.998), (-73.373, 61.068), (-71.374, 61.138), (-69.376, 61.208), (-67.377, 61.278), (-65.378, 61.348), (-63.379, 61.418), (-61.38, 61.488), (-59.382, 61.558), (-57.383, 61.628), (-55.384, 61.698), (-53.385, 61.768), (-51.387, 61.838), (-49.682, 62.761), (-48.065, 63.938), (-46.449, 65.116), (-44.834, 66.295), (-43.221, 67.478), (-41.611, 68.665), (-40.004, 69.856), (-38.403, 71.054), (-36.808, 72.261), (-35.22, 73.477), (-33.641, 74.704), (-32.074, 75.946), (-30.519, 77.204), (-28.979, 78.481), (-27.457, 79.778), (-25.955, 81.099), (-24.477, 82.446), (-23.024, 83.821), (-21.601, 85.226), (-20.21, 86.663), (-18.854, 88.133), (-17.536, 89.637), (-16.257, 91.175), (-15.02, 92.746), (-13.826, 94.35), (-12.673, 95.985), (-11.563, 97.648), (-10.496, 99.34), (-9.469, 101.056), (-8.48, 102.794), (-7.53, 104.554), (-6.613, 106.331), (-5.73, 108.126), (-4.876, 109.934), (-4.051, 111.756), (-3.252, 113.59), (-2.477, 115.433), (-1.724, 117.286), (-0.99, 119.147), (-0.276, 121.015), (0.422, 122.889), (0.605, 124.856), (0.604, 126.856), (0.602, 128.856), (0.601, 130.856), (0.599, 132.856), (0.597, 134.856), (0.596, 136.856), (0.594, 138.856), (0.592, 140.856), (0.591, 142.856), (0.59, 144.383), (0.59, 144.383)]

robot_rotation = [(0.012, 144.687), (0.019, 142.687), (0.026, 140.687), (0.033, 138.687), (0.04, 136.687), (0.047, 134.687), (0.054, 132.687), (0.061, 130.687), (0.068, 128.687), (0.075, 126.687), (0.082, 124.687), (0.089, 122.687), (0.097, 120.687), (0.104, 118.687), (0.111, 116.687), (0.118, 114.687), (0.125, 112.687), (0.132, 110.687), (0.139, 108.687), (0.146, 106.687), (0.152, 104.925), (0.152, 104.925)]

first_last_four_donuts = [(-14.134, 117.4), (-16.133, 117.35), (-18.132, 117.299), (-20.132, 117.249), (-22.131, 117.198), (-24.13, 117.148), (-26.13, 117.097), (-28.129, 117.047), (-30.129, 116.996), (-32.128, 116.946), (-34.127, 116.895), (-36.127, 116.845), (-38.126, 116.794), (-40.125, 116.744), (-42.125, 116.693), (-44.124, 116.643), (-46.123, 116.592), (-48.123, 116.542), (-50.122, 116.491), (-52.122, 116.441), (-54.121, 116.39), (-56.12, 116.34), (-58.12, 116.289), (-60.119, 116.239), (-62.118, 116.188), (-64.118, 116.138), (-66.117, 116.087), (-68.116, 116.034), (-70.116, 115.976), (-72.115, 115.921), (-74.114, 115.868), (-76.113, 115.817), (-78.113, 115.769), (-80.112, 115.723), (-82.112, 115.681), (-84.111, 115.641), (-86.111, 115.606), (-88.111, 115.574), (-90.111, 115.546), (-92.111, 115.522), (-94.11, 115.504), (-96.11, 115.491), (-98.11, 115.484), (-100.11, 115.484), (-102.11, 115.492), (-104.11, 115.509), (-106.11, 115.537), (-108.11, 115.577), (-110.109, 115.632), (-112.108, 115.704), (-114.105, 115.798), (-116.102, 115.92), (-118.096, 116.076), (-120.086, 116.274), (-122.07, 116.52), (-124.051, 116.801), (-126.031, 117.077), (-128.019, 117.296), (-130.014, 117.444), (-132.012, 117.532), (-134.011, 117.575), (-136.011, 117.584), (-138.011, 117.568), (-140.011, 117.534), (-142.01, 117.485), (-144.009, 117.424), (-146.008, 117.354), (-148.006, 117.275), (-150.005, 117.189), (-152.003, 117.098), (-154.0, 117.002), (-156.737, 116.863), (-156.737, 116.863)]


mogo_triangle =  [(-154.663, 118.262), (-153.485, 116.646), (-152.307, 115.03), (-151.129, 113.413), (-149.951, 111.797), (-148.773, 110.18), (-147.595, 108.564), (-146.418, 106.948), (-145.24, 105.331), (-144.062, 103.715), (-142.884, 102.099), (-141.706, 100.482), (-140.528, 98.866), (-139.35, 97.25), (-138.173, 95.633), (-136.995, 94.017), (-135.817, 92.4), (-134.639, 90.784), (-133.461, 89.168), (-132.283, 87.551), (-131.105, 85.935), (-129.927, 84.319), (-128.75, 82.702), (-127.572, 81.086), (-126.394, 79.47), (-125.216, 77.853), (-124.038, 76.237), (-122.86, 74.62), (-121.682, 73.004), (-120.505, 71.388), (-119.327, 69.771), (-118.149, 68.155), (-116.971, 66.539), (-115.793, 64.922), (-114.615, 63.306), (-113.437, 61.689), (-112.26, 60.073), (-111.082, 58.457), (-109.904, 56.84), (-108.726, 55.224), (-107.548, 53.608), (-106.37, 51.991), (-105.192, 50.375), (-104.015, 48.759), (-102.764, 47.042), (-102.764, 47.042)]

mogo_triangle_2 = [(-103.05, 45.734), (-103.987, 47.501), (-104.925, 49.267), (-105.863, 51.034), (-106.801, 52.8), (-107.739, 54.567), (-108.677, 56.333), (-109.615, 58.1), (-110.553, 59.866), (-111.491, 61.632), (-112.429, 63.399), (-113.366, 65.165), (-114.304, 66.932), (-115.242, 68.698), (-116.18, 70.465), (-117.118, 72.231), (-118.056, 73.998), (-118.994, 75.764), (-119.932, 77.531), (-120.87, 79.297), (-121.808, 81.063), (-122.745, 82.83), (-123.683, 84.596), (-124.621, 86.363), (-125.559, 88.129), (-126.497, 89.896), (-127.435, 91.662), (-128.373, 93.429), (-129.311, 95.195), (-130.249, 96.961), (-131.187, 98.728), (-132.124, 100.494), (-133.062, 102.261), (-134.0, 104.027), (-134.938, 105.794), (-135.876, 107.56), (-136.814, 109.327), (-137.752, 111.093), (-138.69, 112.86), (-139.628, 114.626), (-140.566, 116.392), (-141.503, 118.159), (-142.441, 119.925), (-143.379, 121.692), (-144.317, 123.458), (-145.255, 125.225), (-146.193, 126.991), (-147.131, 128.758), (-148.069, 130.524), (-149.007, 132.29), (-149.945, 134.057), (-151.261, 136.536), (-151.261, 136.536)]


corner_to_mogo = [(-160.86, 161.306), (-160.369, 159.367), (-159.879, 157.428), (-159.388, 155.489), (-158.898, 153.55), (-158.407, 151.611), (-157.917, 149.672), (-157.426, 147.733), (-156.936, 145.795), (-156.445, 143.856), (-155.955, 141.917), (-155.464, 139.978), (-154.974, 138.039), (-154.483, 136.1), (-153.993, 134.161), (-153.502, 132.222), (-153.012, 130.283), (-152.521, 128.344), (-152.031, 126.405), (-151.54, 124.466), (-151.05, 122.528), (-150.559, 120.589), (-150.069, 118.65), (-149.578, 116.711), (-149.088, 114.772), (-148.597, 112.833), (-148.107, 110.894), (-147.616, 108.955), (-147.126, 107.016), (-146.635, 105.077), (-146.145, 103.138), (-145.654, 101.199), (-145.164, 99.261), (-144.673, 97.322), (-144.183, 95.383), (-143.692, 93.444), (-143.202, 91.505), (-142.711, 89.566), (-142.221, 87.627), (-141.73, 85.688), (-141.24, 83.749), (-140.749, 81.81), (-140.259, 79.871), (-139.768, 77.932), (-139.278, 75.994), (-138.787, 74.055), (-138.297, 72.116), (-137.806, 70.177), (-137.316, 68.238), (-136.825, 66.299), (-136.335, 64.36), (-135.844, 62.421), (-135.354, 60.482), (-134.863, 58.543), (-134.373, 56.604), (-133.882, 54.665), (-133.391, 52.727), (-132.939, 50.939), (-132.939, 50.939)]

turn_to_mogo = [(-126.727, 57.152), (-126.617, 55.155), (-126.506, 53.158), (-126.396, 51.161), (-126.285, 49.164), (-126.175, 47.167), (-126.064, 45.17), (-125.953, 43.173), (-125.843, 41.176), (-125.732, 39.179), (-125.622, 37.182), (-125.511, 35.185), (-125.401, 33.188), (-125.29, 31.191), (-125.18, 29.194), (-125.069, 27.197), (-124.958, 25.2), (-124.848, 23.203), (-124.737, 21.207), (-124.627, 19.21), (-124.516, 17.213), (-124.406, 15.216), (-124.295, 13.219), (-124.185, 11.222), (-124.074, 9.225), (-123.963, 7.228), (-123.853, 5.231), (-123.742, 3.234), (-123.632, 1.237), (-123.521, -0.76), (-123.411, -2.757), (-123.3, -4.754), (-123.19, -6.751), (-123.079, -8.748), (-122.968, -10.745), (-122.858, -12.741), (-122.747, -14.738), (-122.637, -16.735), (-122.526, -18.732), (-122.416, -20.729), (-122.305, -22.726), (-122.195, -24.723), (-122.084, -26.72), (-121.974, -28.717), (-121.863, -30.714), (-121.752, -32.711), (-121.642, -34.708), (-121.531, -36.705), (-121.421, -38.702), (-121.31, -40.699), (-121.2, -42.696), (-121.089, -44.693), (-120.979, -46.689), (-120.868, -48.686), (-120.757, -50.683), (-120.647, -52.68), (-120.536, -54.677), (-120.426, -56.674), (-120.27, -59.484), (-120.27, -59.484)]

 

collect_right_bottom_rings =   [(-120.515, -79.515), (-118.798, -78.489), (-117.081, -77.464), (-115.364, -76.438), (-113.647, -75.412), (-111.93, -74.387), (-110.213, -73.361), (-108.497, -72.335), (-106.78, -71.309), (-105.063, -70.284), (-103.346, -69.258), (-101.629, -68.232), (-99.912, -67.207), (-98.195, -66.181), (-96.478, -65.155), (-94.761, -64.129), (-93.044, -63.104), (-91.327, -62.078), (-89.61, -61.052), (-87.893, -60.027), (-86.176, -59.001), (-84.459, -57.975), (-82.742, -56.95), (-81.025, -55.924), (-79.308, -54.898), (-77.591, -53.872), (-75.874, -52.847), (-74.157, -51.821), (-72.529, -51.175), (-71.429, -52.846), (-70.304, -54.499), (-69.152, -56.134), (-67.973, -57.75), (-66.772, -59.348), (-65.546, -60.929), (-64.297, -62.491), (-63.028, -64.037), (-61.738, -65.565), (-60.426, -67.075), (-59.096, -68.568), (-57.748, -70.045), (-56.38, -71.505), (-54.995, -72.947), (-53.593, -74.374), (-52.175, -75.784), (-50.74, -77.177), (-49.289, -78.554), (-47.824, -79.915), (-46.344, -81.261), (-44.849, -82.588), (-43.34, -83.901), (-41.817, -85.198), (-40.281, -86.479), (-38.731, -87.742), (-37.168, -88.991), (-35.594, -90.224), (-34.006, -91.44), (-32.406, -92.639), (-30.794, -93.823), (-29.17, -94.991), (-27.535, -96.142), (-25.887, -97.276), (-24.228, -98.393), (-22.559, -99.495), (-20.877, -100.577), (-19.185, -101.643), (-17.482, -102.692), (-15.768, -103.722), (-14.042, -104.733), (-12.307, -105.727), (-10.56, -106.702), (-8.802, -107.656), (-7.035, -108.591), (-5.256, -109.505), (-3.466, -110.398), (-1.666, -111.27), (0.145, -112.119), (1.966, -112.944), (3.798, -113.747), (5.642, -114.522), (7.495, -115.274), (9.36, -115.996), (11.235, -116.692), (13.122, -117.355), (15.019, -117.989), (16.927, -118.587), (18.846, -119.151), (20.776, -119.676), (22.716, -120.161), (24.666, -120.605), (26.627, -120.999), (28.597, -121.343), (30.576, -121.633), (32.562, -121.864), (34.555, -122.028), (36.553, -122.119), (38.553, -122.131), (40.551, -122.054), (42.544, -121.879), (43.485, -121.758), (43.485, -121.758)]
collect_left_bottom_rings =  [(x, -y) for x, y, *_ in collect_right_bottom_rings]

collect_right_bottom_rings2 = [(78.037, -126.338), (76.04, -126.448), (74.046, -126.6), (72.056, -126.795), (70.07, -127.03), (68.089, -127.31), (66.116, -127.636), (64.15, -128.002), (62.192, -128.407), (60.243, -128.858), (58.304, -129.348), (56.375, -129.874), (54.457, -130.443), (52.55, -131.045), (50.655, -131.683), (48.77, -132.354), (46.897, -133.054), (45.035, -133.785), (43.184, -134.54), (41.342, -135.321), (39.509, -136.121), (37.685, -136.941), (35.867, -137.775), (34.055, -138.621), (32.247, -139.475), (30.44, -140.333), (28.633, -141.191), (26.825, -142.045), (25.011, -142.888), (23.191, -143.717), (21.361, -144.523), (19.518, -145.301), (17.661, -146.042), (15.786, -146.739), (13.892, -147.38), (11.976, -147.955), (10.039, -148.453), (8.081, -148.86), (6.105, -149.164), (4.114, -149.354), (2.116, -149.419), (0.117, -149.351), (-1.872, -149.146), (-3.842, -148.804), (-5.784, -148.327), (-7.69, -147.722), (-9.554, -146.999), (-11.374, -146.17), (-13.148, -145.247), (-14.871, -144.232), (-16.55, -143.146), (-18.181, -141.988), (-19.773, -140.777), (-21.318, -139.509), (-22.828, -138.197), (-24.303, -136.846), (-25.742, -135.458), (-27.149, -134.037), (-28.528, -132.587), (-29.879, -131.113), (-31.205, -129.616), (-32.507, -128.098), (-33.787, -126.561), (-35.045, -125.007), (-36.285, -123.437), (-37.506, -121.853), (-38.71, -120.256), (-40.027, -118.905), (-42.027, -118.93), (-44.027, -118.955), (-46.027, -118.981), (-48.027, -119.006), (-50.026, -119.032), (-52.026, -119.057), (-54.026, -119.083), (-56.026, -119.108), (-58.026, -119.134), (-60.026, -119.159), (-62.025, -119.184), (-64.025, -119.21), (-66.025, -119.235), (-68.025, -119.261), (-70.025, -119.286), (-72.025, -119.312), (-74.024, -119.337), (-76.024, -119.363), (-78.024, -119.388), (-80.024, -119.413), (-82.024, -119.439), (-84.024, -119.464), (-86.024, -119.49), (-88.023, -119.515), (-90.023, -119.541), (-92.023, -119.566), (-94.023, -119.592), (-96.023, -119.617), (-98.023, -119.643), (-100.022, -119.668), (-102.022, -119.693), (-104.022, -119.719), (-106.022, -119.744), (-108.022, -119.77), (-110.022, -119.795), (-112.021, -119.821), (-114.021, -119.846), (-116.021, -119.872), (-118.021, -119.897), (-120.021, -119.922), (-122.021, -119.948), (-124.02, -119.973), (-126.02, -119.999), (-128.02, -120.024), (-130.02, -120.05), (-132.02, -120.075), (-134.02, -120.101), (-136.019, -120.126), (-138.019, -120.151), (-140.019, -120.177), (-142.019, -120.202), (-144.019, -120.228), (-146.019, -120.253), (-148.019, -120.279), (-150.018, -120.304), (-152.018, -120.33), (-154.018, -120.355)]
collect_left_bottom_rings2 =  [(x, -y) for x, y, *_ in collect_right_bottom_rings2]
    
toprightmogo2_missing = [(60.258, -119.894), (58.311, -120.352), (56.365, -120.814), (54.42, -121.281), (52.477, -121.756), (50.536, -122.237), (48.596, -122.723), (46.658, -123.216), (44.722, -123.717), (42.787, -124.226), (40.855, -124.742), (38.925, -125.266), (36.997, -125.799), (35.072, -126.342), (33.15, -126.895), (31.231, -127.458), (29.316, -128.033), (27.404, -128.62), (25.496, -129.22), (23.593, -129.835), (21.694, -130.464), (19.801, -131.109), (17.915, -131.773), (16.035, -132.456), (14.163, -133.161), (12.3, -133.889), (10.448, -134.642), (8.606, -135.421), (6.775, -136.227), (4.954, -137.054), (3.132, -137.878), (1.275, -138.619), (-0.678, -139.016), (-2.658, -138.787), (-4.565, -138.187), (-6.431, -137.468), (-8.285, -136.718), (-10.139, -135.967), (-11.996, -135.224), (-13.857, -134.493), (-15.724, -133.776), (-17.596, -133.072), (-19.473, -132.382), (-21.355, -131.703), (-23.241, -131.037), (-25.13, -130.382), (-27.023, -129.736), (-28.92, -129.101), (-30.819, -128.475), (-32.721, -127.857), (-34.626, -127.248), (-36.534, -126.647), (-38.444, -126.053), (-40.355, -125.466), (-42.269, -124.886), (-44.185, -124.311), (-46.102, -123.742), (-48.022, -123.18), (-49.943, -122.624), (-51.865, -122.072), (-53.789, -121.524), (-55.714, -120.984), (-57.641, -120.446), (-59.568, -119.913), (-61.566, -119.894), (-63.566, -119.894), (-65.566, -119.894), (-67.566, -119.894), (-69.566, -119.894), (-71.566, -119.894), (-73.566, -119.894), (-75.566, -119.894), (-77.566, -119.894), (-79.566, -119.894), (-81.566, -119.894), (-83.566, -119.894), (-85.566, -119.894), (-87.566, -119.894), (-89.566, -119.894), (-91.566, -119.894), (-93.566, -119.894), (-95.566, -119.894), (-97.566, -119.894), (-99.566, -119.894), (-101.566, -119.894), (-103.566, -119.894), (-105.566, -119.894), (-107.566, -119.894), (-109.566, -119.894), (-111.566, -119.894), (-113.566, -119.894), (-115.566, -119.894), (-117.566, -119.894), (-119.566, -119.894), (-121.566, -119.894), (-123.566, -119.894), (-125.566, -119.894), (-127.566, -119.894), (-129.566, -119.894), (-131.566, -119.894), (-133.566, -119.894), (-135.566, -119.894), (-137.566, -119.894), (-139.566, -119.894), (-141.566, -119.894), (-143.566, -119.894), (-145.364, -119.894), (-145.364, -119.894)]

#mogo_to_corner = [(-160.167, -120.433), (-158.167, -120.433), (-156.167, -120.433), (-154.167, -120.433), (-152.167, -120.433), (-150.167, -120.433), (-148.167, -120.433), (-146.167, -120.433), (-144.167, -120.433), (-142.167, -120.433), (-140.167, -120.433), (-138.167, -120.433), (-136.167, -120.433), (-134.167, -120.433), (-132.167, -120.433), (-130.167, -120.433), (-128.167, -120.433), (-126.167, -120.433), (-124.167, -120.433), (-122.167, -120.433), (-120.167, -120.433), (-118.167, -120.433), (-116.167, -120.433), (-114.167, -120.433), (-112.167, -120.433), (-110.167, -120.433), (-108.167, -120.433), (-106.167, -120.433), (-104.167, -120.433), (-102.167, -120.433), (-100.167, -120.433), (-98.167, -120.433), (-96.167, -120.433), (-94.167, -120.433), (-92.167, -120.433), (-90.167, -120.433), (-88.167, -120.433), (-86.167, -120.433), (-84.167, -120.433), (-82.167, -120.433), (-80.167, -120.433), (-78.167, -120.433), (-76.167, -120.433), (-74.167, -120.433), (-72.167, -120.433), (-70.167, -120.433), (-68.167, -120.433), (-66.167, -120.433), (-64.167, -120.433), (-62.167, -120.433), (-60.167, -120.433), (-58.167, -120.433), (-56.167, -120.433), (-54.167, -120.433), (-52.167, -120.433), (-50.167, -120.433), (-48.167, -120.433), (-46.167, -120.433), (-44.167, -120.433), (-42.167, -120.433), (-40.167, -120.433), (-38.167, -120.433), (-36.346, -120.433), (-36.346, -120.433)]
# Optimized Path
mogo_to_corner = [(-160.167, -120.433), (-158.167, -120.433), (-156.167, -120.433), (-154.167, -120.433), (-152.167, -120.433), (-150.167, -120.433), (-148.167, -120.433), (-146.167, -120.433), (-144.167, -120.433), (-142.167, -120.433), (-140.167, -120.433), (-138.167, -120.433), (-136.167, -120.433), (-134.167, -120.433), (-132.167, -120.433), (-130.167, -120.433), (-128.167, -120.433), (-126.167, -120.433), (-124.167, -120.433), (-122.167, -120.433), (-120.167, -120.433), (-118.167, -120.433), (-116.167, -120.433), (-114.167, -120.433), (-112.167, -120.433), (-110.167, -120.433), (-108.167, -120.433), (-106.167, -120.433), (-104.167, -120.433), (-102.167, -120.433), (-100.167, -120.433), (-98.167, -120.433), (-96.167, -120.433), (-94.167, -120.433), (-92.167, -120.433), (-90.167, -120.433), (-88.167, -120.433), (-86.167, -120.433), (-84.167, -120.433), (-82.167, -120.433), (-80.167, -120.433), (-78.167, -120.433), (-76.167, -120.433)]


mogo_to_left_corner  =  [(x, -y) for x, y, *_ in mogo_to_corner]

bottom_right_mogo = [(-152.818, -151.576), (-152.659, -149.582), (-152.499, -147.588), (-152.34, -145.595), (-152.18, -143.601), (-152.021, -141.608), (-151.861, -139.614), (-151.702, -137.62), (-151.542, -135.627), (-151.383, -133.633), (-151.223, -131.639), (-151.064, -129.646), (-150.904, -127.652), (-150.745, -125.659), (-150.585, -123.665), (-150.426, -121.671), (-149.494, -120.481), (-147.495, -120.401), (-145.497, -120.32), (-143.499, -120.239), (-141.5, -120.159), (-139.502, -120.078), (-137.504, -119.997), (-135.505, -119.917), (-133.507, -119.836), (-131.508, -119.755), (-129.51, -119.675), (-127.512, -119.594), (-125.513, -119.513), (-123.515, -119.433), (-121.517, -119.352), (-119.518, -119.271), (-117.52, -119.191), (-115.522, -119.11), (-113.523, -119.03), (-111.525, -118.949), (-109.526, -118.868), (-107.528, -118.788), (-105.53, -118.707), (-103.531, -118.626), (-101.533, -118.546), (-99.535, -118.465), (-97.536, -118.384), (-95.538, -118.304), (-93.539, -118.223), (-91.541, -118.142), (-89.543, -118.062), (-87.544, -117.981), (-85.546, -117.9), (-83.548, -117.82), (-81.549, -117.739), (-79.551, -117.658), (-77.552, -117.578), (-75.554, -117.497), (-73.556, -117.417), (-71.557, -117.336), (-69.559, -117.255), (-67.561, -117.175), (-65.562, -117.094), (-63.564, -117.013), (-61.565, -116.933), (-59.567, -116.852), (-57.569, -116.771), (-55.57, -116.691), (-53.572, -116.61), (-51.574, -116.529), (-49.575, -116.449), (-47.577, -116.368), (-45.578, -116.287), (-43.58, -116.207), (-41.582, -116.126), (-39.583, -116.045), (-37.585, -115.965), (-35.587, -115.884), (-33.588, -115.803), (-31.59, -115.723), (-29.591, -115.642), (-27.593, -115.562), (-25.595, -115.481), (-23.596, -115.4), (-21.598, -115.32), (-19.6, -115.239), (-17.601, -115.158), (-15.603, -115.078), (-13.604, -114.997), (-11.803, -114.924), (-11.803, -114.924)]
 

mogo_to_corner2 =  [(-36.346, -120.433), (-38.152, -119.575), (-39.963, -118.725), (-41.777, -117.884), (-43.597, -117.054), (-45.422, -116.236), (-47.251, -115.428), (-49.086, -114.631), (-50.926, -113.848), (-52.772, -113.08), (-54.624, -112.324), (-56.482, -111.583), (-58.345, -110.856), (-60.215, -110.145), (-62.091, -109.454), (-63.975, -108.781), (-65.865, -108.127), (-67.761, -107.493), (-69.665, -106.881), (-71.577, -106.292), (-73.495, -105.727), (-75.421, -105.189), (-77.355, -104.679), (-79.297, -104.199), (-81.246, -103.75), (-83.202, -103.336), (-85.166, -102.957), (-87.137, -102.621), (-89.116, -102.328), (-91.1, -102.08), (-93.09, -101.878), (-95.084, -101.73), (-97.082, -101.642), (-99.082, -101.611), (-101.081, -101.647), (-103.079, -101.752), (-105.07, -101.929), (-107.054, -102.186), (-109.025, -102.524), (-110.98, -102.945), (-112.912, -103.459), (-114.82, -104.058), (-116.697, -104.749), (-118.536, -105.533), (-120.336, -106.404), (-122.093, -107.36), (-123.8, -108.402), (-125.457, -109.522), (-127.063, -110.713), (-128.618, -111.97), (-130.119, -113.292), (-131.57, -114.668), (-132.973, -116.093), (-134.328, -117.564), (-135.638, -119.076), (-136.908, -120.62), (-138.137, -122.197), (-139.332, -123.801), (-140.495, -125.429), (-141.626, -127.078), (-142.732, -128.744), (-143.812, -130.428), (-144.871, -132.124), (-145.91, -133.833), (-146.933, -135.552), (-147.941, -137.279), (-148.936, -139.014), (-149.921, -140.755), (-150.896, -142.501), (-151.864, -144.251), (-152.827, -146.004), (-153.785, -147.759), (-154.741, -149.516)]
# Optimized Path
#mogo_to_corner2 =  [(-36.346, -120.433), (-38.152, -119.575), (-39.963, -118.725), (-41.777, -117.884), (-43.597, -117.054), (-45.422, -116.236), (-47.251, -115.428), (-49.086, -114.631), (-50.926, -113.848), (-52.772, -113.08), (-54.624, -112.324), (-56.482, -111.583), (-58.345, -110.856), (-60.215, -110.145), (-62.091, -109.454), (-63.975, -108.781), (-65.865, -108.127), (-67.761, -107.493), (-69.665, -106.881), (-71.577, -106.292), (-73.495, -105.727), (-75.421, -105.189), (-77.355, -104.679), (-79.297, -104.199), (-81.246, -103.75), (-83.202, -103.336), (-85.166, -102.957), (-87.137, -102.621), (-89.116, -102.328), (-91.1, -102.08), (-93.09, -101.878), (-95.084, -101.73), (-97.082, -101.642), (-99.082, -101.611), (-101.081, -101.647), (-103.079, -101.752), (-105.07, -101.929), (-107.054, -102.186), (-109.025, -102.524), (-110.98, -102.945), (-112.912, -103.459), (-114.82, -104.058), (-116.697, -104.749), (-118.536, -105.533), (-120.336, -106.404), (-122.093, -107.36), (-123.8, -108.402), (-125.457, -109.522), (-127.063, -110.713), (-128.618, -111.97), (-130.119, -113.292), (-131.57, -114.668), (-132.973, -116.093), (-134.328, -117.564), (-135.638, -119.076), (-136.908, -120.62), (-138.137, -122.197), (-139.332, -123.801), (-140.495, -125.429), (-141.626, -127.078), (-142.732, -128.744), (-143.812, -130.428), (-144.871, -132.124), (-145.91, -133.833)]

mogo_to_left_corner2  =  [(x, -y) for x, y, *_ in mogo_to_corner2]

# pathfile: emptymogo1.txt
emptymogo1 = [(90.873, -109.996, 120, 0), (92.127, -108.438, 120), (93.381, -106.88, 120), (94.635, -105.322, 120), (95.888, -103.763, 120), (97.142, -102.205, 120), (98.396, -100.647, 120), (99.65, -99.089, 120), (100.903, -97.531, 120), (102.157, -95.972, 120), (103.411, -94.414, 120), (104.665, -92.856, 120), (105.919, -91.298, 120), (107.172, -89.74, 120), (108.426, -88.181, 120), (109.68, -86.623, 120), (110.934, -85.065, 120), (112.188, -83.507, 120), (113.441, -81.949, 120), (114.695, -80.39, 120), (115.949, -78.832, 120), (117.203, -77.274, 120), (118.457, -75.716, 120), (119.71, -74.157, 120), (120.964, -72.599, 120), (122.218, -71.041, 120), (123.472, -69.483, 120), (124.725, -67.925, 120), (125.648, -66.778, 120, 0), (125.648, -66.778, 0, 0)]

# pathfile: emptymogo2.txt
emptymogo2 = [(129.119, -49.758, 120, 0), (128.791, -47.786, 120), (128.462, -45.813, 120), (128.133, -43.84, 120), (127.804, -41.867, 120), (127.475, -39.894, 120), (127.147, -37.922, 120), (126.818, -35.949, 120), (126.489, -33.976, 120), (126.16, -32.003, 120), (125.831, -30.031, 120), (125.503, -28.058, 120), (125.174, -26.085, 120), (124.845, -24.112, 120), (124.516, -22.139, 120), (124.187, -20.167, 120), (123.859, -18.194, 120), (123.53, -16.221, 120), (123.201, -14.248, 120), (122.872, -12.275, 120), (122.543, -10.303, 120), (122.215, -8.33, 120), (121.886, -6.357, 120), (121.557, -4.384, 120), (121.228, -2.411, 120), (120.899, -0.439, 120), (120.514, 1.874, 120, 0), (120.514, 1.874, 0, 0)]

#pathfile: emptymogo3.txt
emptymogo3 = [(118.03, 11.803), (116.03, 11.828), (114.032, 11.901), (112.036, 12.024), (110.043, 12.199), (108.057, 12.428), (106.078, 12.715), (104.108, 13.061), (102.15, 13.469), (100.207, 13.941), (98.282, 14.484), (96.377, 15.094), (94.496, 15.772), (92.642, 16.521), (90.817, 17.339), (89.026, 18.228), (87.276, 19.196), (85.566, 20.234), (83.899, 21.338), (82.278, 22.509), (80.713, 23.754), (79.199, 25.06), (77.736, 26.424), (76.332, 27.848), (74.987, 29.328), (73.697, 30.856), (72.465, 32.431), (71.295, 34.053), (70.179, 35.713), (69.118, 37.408), (68.118, 39.14), (67.17, 40.901), (66.272, 42.687), (65.429, 44.501), (64.636, 46.337), (63.888, 48.192), (63.186, 50.064), (62.532, 51.954), (61.918, 53.858), (61.344, 55.774), (60.812, 57.701), (60.318, 59.639), (59.859, 61.586), (59.433, 63.54), (59.044, 65.502), (58.686, 67.469), (58.357, 69.442), (58.057, 71.419), (57.788, 73.401), (57.544, 75.386), (57.325, 77.374), (57.133, 79.365), (56.964, 81.358), (56.818, 83.352), (56.693, 85.348), (56.59, 87.346), (56.506, 89.344), (56.442, 91.343), (56.397, 93.342), (56.368, 95.342), (56.356, 97.342), (56.36, 99.342), (56.379, 101.342), (56.412, 103.342), (56.458, 105.341), (56.516, 107.34), (56.584, 109.339), (56.662, 111.338), (56.746, 113.336), (56.836, 115.334), (56.927, 117.332), (57.015, 119.33), (57.092, 121.328), (57.143, 123.328), (58.017, 124.897), (59.612, 126.104), (61.223, 127.289), (62.844, 128.461), (64.473, 129.621), (66.117, 130.76), (67.772, 131.883), (69.437, 132.99), (71.114, 134.081), (72.806, 135.147), (74.509, 136.195), (76.224, 137.225), (77.95, 138.235), (79.692, 139.218), (81.446, 140.178), (83.213, 141.115), (84.992, 142.028), (86.785, 142.914), (88.591, 143.774), (90.413, 144.6), (92.247, 145.395), (94.096, 146.159), (95.958, 146.889), (97.833, 147.583), (99.722, 148.239), (101.625, 148.856), (103.541, 149.429), (105.47, 149.958), (107.411, 150.439), (109.364, 150.87), (111.328, 151.247), (113.302, 151.568), (115.285, 151.821), (117.276, 152.011), (119.272, 152.132), (121.271, 152.182), (123.271, 152.148), (125.267, 152.028), (127.256, 151.824), (129.232, 151.517), (131.191, 151.112), (133.123, 150.599), (135.023, 149.974), (136.879, 149.231), (138.685, 148.374), (140.424, 147.387), (142.093, 146.286), (143.675, 145.063), (145.159, 143.723), (146.541, 142.279), (147.809, 140.733), (148.955, 139.094), (149.982, 137.379), (150.884, 135.594), (151.659, 133.751), (152.319, 131.864), (152.852, 129.936), (153.279, 127.983), (153.59, 126.008), (153.807, 124.02), (153.916, 122.023), (153.941, 120.023), (153.876, 118.025), (153.728, 116.03), (153.508, 114.043), (153.215, 112.064), (152.851, 110.098), (152.425, 108.144), (151.941, 106.204), (151.401, 104.278), (150.809, 102.368), (150.164, 100.475), (149.472, 98.598), (148.735, 96.739), (147.956, 94.897), (147.137, 93.073), (146.28, 91.266), (145.387, 89.476), (144.46, 87.704), (143.5, 85.95), (142.508, 84.213), (141.487, 82.493), (140.437, 80.791), (139.357, 79.108), (138.251, 77.441), (137.121, 75.792), (135.967, 74.158), (133.751, 71.144), (133.751, 71.144)]
#pathfile: emptymogo4.txt
emptymogo4 = [(118.099, 93.436), (116.278, 94.262), (114.457, 95.089), (112.635, 95.915), (110.814, 96.742), (108.993, 97.568), (107.172, 98.395), (105.35, 99.222), (103.529, 100.048), (101.708, 100.875), (99.887, 101.701), (98.066, 102.528), (96.244, 103.354), (94.423, 104.181), (92.602, 105.007), (90.781, 105.834), (88.96, 106.661), (87.138, 107.487), (85.317, 108.314), (83.496, 109.14), (81.675, 109.967), (79.854, 110.793), (78.032, 111.62), (76.211, 112.446), (74.39, 113.273), (72.569, 114.099), (70.747, 114.926), (68.926, 115.753), (67.105, 116.579), (65.284, 117.406), (63.463, 118.232), (61.641, 119.059), (59.82, 119.885), (57.999, 120.712), (56.441, 121.419), (56.441, 121.419)]

#mogo_in_right_top_corner1 = [(-143.5, -152.197), (-141.561, -151.706), (-139.622, -151.215), (-137.684, -150.724), (-135.745, -150.233), (-133.806, -149.742), (-131.867, -149.251), (-129.929, -148.76), (-127.99, -148.269), (-126.051, -147.778), (-124.112, -147.287), (-122.173, -146.795), (-120.235, -146.304), (-118.296, -145.813), (-116.357, -145.322), (-114.418, -144.831), (-112.479, -144.34), (-110.541, -143.849), (-108.602, -143.358), (-106.663, -142.867), (-104.724, -142.376), (-102.786, -141.885), (-100.847, -141.394), (-98.908, -140.903), (-96.969, -140.412), (-95.03, -139.921), (-93.092, -139.43), (-91.153, -138.939), (-89.214, -138.448), (-87.275, -137.957), (-85.337, -137.466), (-83.398, -136.975), (-81.459, -136.484), (-79.52, -135.992), (-77.581, -135.501), (-75.643, -135.01), (-73.704, -134.519), (-71.765, -134.028), (-69.826, -133.537), (-67.888, -133.046), (-65.949, -132.555), (-64.01, -132.064), (-62.071, -131.573), (-60.132, -131.082), (-58.194, -130.591), (-56.255, -130.1), (-54.316, -129.609), (-52.377, -129.118), (-50.438, -128.627), (-48.5, -128.136), (-46.561, -127.645), (-44.622, -127.154), (-42.683, -126.663), (-40.745, -126.172), (-38.806, -125.681), (-36.867, -125.189), (-34.928, -124.698), (-32.989, -124.207), (-31.051, -123.716), (-29.112, -123.225), (-27.173, -122.734), (-25.234, -122.243), (-23.296, -121.752), (-21.357, -121.261), (-19.418, -120.77), (-17.479, -120.279), (-15.54, -119.788), (-13.602, -119.297), (-11.663, -118.806), (-9.724, -118.315), (-7.785, -117.824), (-5.846, -117.333), (-3.908, -116.842), (-1.242, -116.167), (-1.242, -116.167)]
# Optimized Path
# pathfile: mogo_in_right_top_corner1_x1.txt
mogo_in_right_top_corner1 = [(-100.919, -119.814, 120, 0), (-98.92, -119.751, 120), (-96.921, -119.689, 120), (-94.922, -119.626, 120), (-92.923, -119.564, 120), (-90.924, -119.502, 120), (-88.925, -119.439, 120), (-86.926, -119.377, 120), (-84.927, -119.314, 120), (-82.928, -119.252, 120), (-80.929, -119.189, 120), (-78.93, -119.127, 120), (-76.931, -119.064, 120), (-74.932, -119.002, 120), (-72.933, -118.939, 120), (-70.933, -118.953, 120, 0), (-68.934, -118.989, 120), (-66.934, -119.026, 120), (-64.934, -119.062, 120), (-62.935, -119.099, 120), (-60.935, -119.136, 120), (-58.935, -119.172, 120), (-56.936, -119.209, 120), (-54.936, -119.245, 120), (-52.936, -119.282, 120), (-50.937, -119.319, 120), (-48.937, -119.355, 120), (-46.937, -119.392, 120), (-44.938, -119.428, 120), (-42.938, -119.465, 120), (-40.938, -119.501, 120), (-38.939, -119.538, 120), (-36.939, -119.575, 120), (-34.939, -119.611, 120), (-32.94, -119.648, 120), (-30.94, -119.684, 120), (-28.94, -119.721, 120), (-26.941, -119.757, 120), (-24.941, -119.794, 120), (-22.941, -119.831, 120), (-20.942, -119.867, 120), (-18.942, -119.904, 120), (-16.942, -119.94, 120), (-14.943, -119.977, 120), (-12.943, -120.014, 120), (-10.943, -120.05, 120), (-8.944, -120.087, 120), (-6.944, -120.123, 120), (-4.944, -120.16, 120), (-2.945, -120.196, 120), (-0.945, -120.233, 120), (0.445, -120.258, 120, 0), (0.445, -120.258, 0, 0)]

#Version 3: score 2 rings on 2 mobile goals, but go for closer mobile goal, then go for middle mobile goal.
p1redright6Points = [(-149.517, -58.263), (-148.685, -60.082), (-147.812, -61.881), (-146.893, -63.658), (-145.926, -65.409), (-144.907, -67.129), (-143.833, -68.817), (-142.704, -70.467), (-141.517, -72.076), (-140.271, -73.64), (-138.963, -75.153), (-137.582, -76.6), (-136.138, -77.983), (-134.63, -79.296), (-133.048, -80.519), (-131.406, -81.66), (-129.696, -82.697), (-127.931, -83.637), (-126.108, -84.459), (-124.241, -85.174), (-122.33, -85.763), (-120.388, -86.237), (-118.42, -86.595), (-116.435, -86.83), (-114.439, -86.958), (-112.439, -86.976), (-110.442, -86.888), (-108.45, -86.708), (-106.469, -86.433), (-104.502, -86.074), (-102.55, -85.64), (-100.617, -85.126), (-98.702, -84.549), (-96.808, -83.907), (-94.935, -83.206), (-93.082, -82.454), (-91.252, -81.646), (-89.443, -80.795), (-87.655, -79.899), (-85.888, -78.961), (-84.142, -77.987), (-82.417, -76.974), (-80.713, -75.927), (-79.028, -74.85), (-77.365, -73.739), (-75.721, -72.6), (-74.097, -71.432), (-72.493, -70.238), (-70.909, -69.017), (-69.346, -67.77), (-67.803, -66.497), (-66.283, -65.198), (-64.785, -63.872), (-63.313, -62.519), (-61.87, -61.133), (-60.467, -59.708), (-59.143, -58.211), (-58.878, -57.733), (-58.878, -57.733)]

p2redright6Points = [(-58.878, -57.733), (-60.732, -56.982), (-62.585, -56.231), (-64.439, -55.48), (-66.293, -54.729), (-68.146, -53.978), (-70.0, -53.227), (-71.853, -52.476), (-73.707, -51.725), (-75.561, -50.974), (-77.414, -50.223), (-79.268, -49.472), (-81.122, -48.721), (-82.975, -47.97), (-84.829, -47.219), (-86.683, -46.468), (-88.536, -45.717), (-90.39, -44.966), (-92.243, -44.214), (-94.097, -43.463), (-95.951, -42.712), (-97.804, -41.961), (-99.658, -41.21), (-101.512, -40.459), (-103.365, -39.708), (-105.219, -38.957), (-107.072, -38.206), (-108.926, -37.455), (-110.78, -36.704), (-112.633, -35.953), (-114.487, -35.202), (-116.341, -34.451), (-118.194, -33.7), (-120.364, -32.821), (-120.364, -32.821)]

p3redright6Points = [(-120.364, -32.821), (-118.691, -33.916), (-117.027, -35.026), (-115.372, -36.15), (-113.727, -37.287), (-112.093, -38.44), (-110.469, -39.608), (-108.855, -40.789), (-107.251, -41.983), (-105.658, -43.193), (-104.076, -44.416), (-102.503, -45.651), (-100.941, -46.901), (-99.39, -48.162), (-97.848, -49.437), (-96.317, -50.723), (-94.795, -52.021), (-93.284, -53.331), (-91.782, -54.652), (-90.289, -55.983), (-88.805, -57.324), (-87.33, -58.674), (-85.863, -60.034), (-84.404, -61.401), (-82.952, -62.776), (-81.506, -64.159), (-80.066, -65.547), (-78.632, -66.941), (-77.202, -68.339), (-75.776, -69.741), (-74.352, -71.146), (-72.931, -72.553), (-71.511, -73.961), (-70.09, -75.369), (-68.668, -76.775), (-67.244, -78.18), (-65.816, -79.58), (-64.384, -80.976), (-62.946, -82.366), (-61.5, -83.747), (-60.045, -85.12), (-58.581, -86.482), (-57.105, -87.832), (-55.616, -89.167), (-54.112, -90.486), (-52.594, -91.788), (-51.059, -93.07), (-49.507, -94.331), (-47.935, -95.567), (-46.343, -96.778), (-44.731, -97.961), (-43.097, -99.115), (-41.442, -100.238), (-39.764, -101.327), (-38.064, -102.379), (-36.341, -103.395), (-34.596, -104.372), (-32.829, -105.309), (-31.041, -106.206), (-29.233, -107.06),(-27.404, -107.87),(-27.404, -107.87), (-25.557, -108.637), (-25.557, -108.637)] # , (-22.835, -109.678), (-22.835, -109.678)

p4redright6Points = [(-22.835, -109.678), (-24.729, -110.321), (-26.623, -110.963), (-28.517, -111.606), (-30.411, -112.248), (-32.305, -112.891), (-34.199, -113.534), (-36.093, -114.176), (-37.987, -114.819), (-39.881, -115.461), (-41.775, -116.104), (-43.668, -116.747), (-45.562, -117.389), (-47.456, -118.032), (-49.35, -118.674), (-51.244, -119.317), (-53.138, -119.96), (-55.032, -120.602), (-56.926, -121.245), (-58.82, -121.887), (-60.714, -122.53), (-62.608, -123.173), (-64.502, -123.815), (-66.396, -124.458), (-68.29, -125.1), (-70.184, -125.743), (-72.078, -126.386), (-73.972, -127.028), (-75.866, -127.671), (-77.76, -128.313), (-79.654, -128.956), (-81.548, -129.599), (-82.2, -129.82), (-82.2, -129.82)]

p5redright6Points = [(-82.2, -129.82), (-81.018, -128.206), (-79.837, -126.593), (-78.655, -124.979), (-77.473, -123.366), (-76.291, -121.752), (-75.11, -120.139), (-73.928, -118.525), (-72.746, -116.912), (-71.564, -115.298), (-70.383, -113.685), (-69.201, -112.071), (-68.019, -110.458), (-66.837, -108.844), (-65.656, -107.231), (-64.474, -105.617), (-63.292, -104.003), (-62.11, -102.39), (-60.929, -100.776), (-59.747, -99.163), (-58.565, -97.549), (-57.383, -95.936), (-56.202, -94.322), (-55.02, -92.709), (-53.838, -91.095), (-52.657, -89.482), (-51.475, -87.868), (-50.293, -86.255), (-49.111, -84.641), (-47.93, -83.027), (-46.748, -81.414), (-45.566, -79.8), (-44.384, -78.187), (-43.203, -76.573), (-42.021, -74.96), (-40.839, -73.346), (-39.657, -71.733), (-38.476, -70.119), (-37.294, -68.506), (-36.112, -66.892), (-34.93, -65.279), (-33.749, -63.665), (-32.567, -62.052), (-31.385, -60.438), (-30.204, -58.824), (-29.022, -57.211), (-27.84, -55.597), (-27.075, -54.553), (-27.075, -54.553)]

p1blueleft6Points = [(abs(x), y) for x, y in p1redright6Points]   
p2blueleft6Points = [(abs(x), y) for x, y in p2redright6Points]  
p3blueleft6Points = [(abs(x), y) for x, y in p3redright6Points] 
p3blueleft6Points = [(abs(x), y) for x, y in p4redright6Points]
p4blueleft6Points = [(abs(x), y) for x, y in p5redright6Points]

# pathfile: mogo_in_right_top_corner2.txt
mogo_in_right_top_corner2 = [(30.635, -118.124, 120, 0), (32.477, -117.343, 120), (34.318, -116.562, 120), (36.158, -115.78, 120), (37.999, -114.996, 120), (39.838, -114.212, 120), (41.677, -113.426, 120), (43.516, -112.638, 120), (45.354, -111.849, 120), (47.191, -111.059, 120), (49.027, -110.267, 120), (50.863, -109.473, 120), (52.698, -108.677, 120), (54.532, -107.879, 120), (56.364, -107.078, 120), (58.196, -106.275, 120), (60.027, -105.47, 120), (61.856, -104.662, 120), (63.684, -103.85, 120), (65.511, -103.035, 120), (67.335, -102.216, 120), (69.158, -101.393, 120), (70.979, -100.566, 120), (72.798, -99.734, 120), (74.614, -98.897, 120), (76.428, -98.053, 120), (78.238, -97.204, 120), (80.046, -96.347, 120), (81.849, -95.484, 120), (83.649, -94.612, 120), (85.445, -93.731, 120), (87.237, -92.842, 120), (89.023, -91.944, 120), (90.806, -91.036, 120), (92.583, -90.12, 120), (94.357, -89.195, 120), (96.126, -88.262, 120), (97.892, -87.323, 120), (99.655, -86.379, 120), (101.416, -85.431, 120), (103.176, -84.481, 120), (104.936, -83.531, 120), (106.695, -82.58, 120), (108.456, -81.631, 120), (110.218, -80.685, 120), (111.981, -79.741, 120), (113.746, -78.8, 120), (115.512, -77.862, 120), (117.281, -76.928, 120), (119.051, -75.998, 120), (120.823, -75.071, 120), (122.597, -74.147, 120), (124.373, -73.227, 120), (126.151, -72.31, 120), (127.93, -71.397, 120), (129.711, -70.487, 120), (131.493, -69.579, 120), (133.277, -68.675, 120), (135.062, -67.773, 120), (136.848, -66.874, 120), (138.636, -65.977, 120), (140.425, -65.083, 120), (142.215, -64.191, 120), (144.006, -63.301, 120), (145.798, -62.413, 120), (147.591, -61.527, 120), (150.537, -60.077, 120, 0), (150.537, -60.077, 0, 0)]
mogo_in_right_top_corner3 = [(148.47, -66.47), (148.162, -68.446), (147.899, -70.428), (147.683, -72.417), (147.511, -74.409), (147.376, -76.405), (147.28, -78.402), (147.215, -80.401), (147.179, -82.401), (147.172, -84.401), (147.188, -86.401), (147.224, -88.4), (147.279, -90.4), (147.349, -92.398), (147.432, -94.397), (147.525, -96.394), (147.625, -98.392), (147.729, -100.389), (147.836, -102.386), (147.942, -104.384), (148.043, -106.381), (148.137, -108.379), (148.222, -110.377), (148.292, -112.376), (148.346, -114.375), (148.377, -116.375), (148.385, -118.375), (148.36, -120.375), (148.303, -122.374), (148.201, -124.371), (148.057, -126.366), (147.855, -128.355), (147.594, -130.338), (147.265, -132.311), (146.855, -134.268), (146.36, -136.205), (145.771, -138.117), (145.071, -139.99), (144.258, -141.817), (143.327, -143.586), (142.273, -145.285), (141.094, -146.9), (139.789, -148.415), (138.373, -149.825), (136.854, -151.126), (135.242, -152.308), (133.549, -153.373), (131.795, -154.332), (129.981, -155.173), (128.127, -155.922), (126.235, -156.571), (124.316, -157.135), (122.377, -157.623), (120.42, -158.036), (118.45, -158.38), (116.471, -158.665), (114.484, -158.895), (112.492, -159.074), (110.497, -159.207), (108.499, -159.298), (106.5, -159.348), (104.5, -159.363), (102.5, -159.344), (100.501, -159.295), (98.502, -159.218), (96.505, -159.11), (94.51, -158.977), (92.516, -158.821), (90.524, -158.645), (88.533, -158.45), (86.545, -158.229), (84.56, -157.993), (82.575, -157.742), (80.594, -157.471), (78.614, -157.184), (76.637, -156.886), (74.662, -156.571), (70.818, -155.924), (70.818, -155.924)]
p1_rightmogo = [(164.0, -131.076), (163.293, -129.205), (162.587, -127.334), (161.88, -125.463), (161.174, -123.592), (160.467, -121.721), (159.76, -119.85), (159.054, -117.979), (158.347, -116.108), (157.641, -114.237), (156.934, -112.366), (156.227, -110.495), (155.521, -108.624), (154.814, -106.753), (154.107, -104.882), (153.401, -103.01), (152.694, -101.139), (151.988, -99.268), (151.281, -97.397), (150.574, -95.526), (149.868, -93.655), (149.161, -91.784), (148.455, -89.913), (147.748, -88.042), (147.041, -86.171), (146.335, -84.3), (145.628, -82.429), (144.922, -80.558), (144.215, -78.687), (143.508, -76.816), (142.802, -74.945), (142.095, -73.074), (141.389, -71.203), (140.682, -69.332), (139.975, -67.461), (139.269, -65.59), (138.562, -63.719), (137.856, -61.848), (137.149, -59.977), (136.442, -58.106), (135.736, -56.235), (135.029, -54.364), (134.322, -52.493), (133.616, -50.622), (132.909, -48.751), (132.203, -46.88), (131.496, -45.009), (130.789, -43.138), (130.083, -41.267), (129.376, -39.396), (128.67, -37.525), (127.963, -35.654), (127.256, -33.783), (126.55, -31.912), (125.843, -30.041), (125.137, -28.17), (124.43, -26.299), (123.723, -24.428), (123.017, -22.557), (122.31, -20.686), (121.604, -18.815), (120.897, -16.944), (119.894, -14.288), (119.894, -14.288)]
p2_rightmogo = [(116.788, -3.106), (115.463, -1.608), (114.138, -0.11), (112.812, 1.388), (111.487, 2.886), (110.162, 4.384), (108.837, 5.882), (107.512, 7.38), (106.187, 8.878), (104.862, 10.376), (103.536, 11.874), (102.211, 13.372), (100.886, 14.87), (99.561, 16.368), (98.236, 17.866), (96.911, 19.364), (95.586, 20.862), (94.26, 22.36), (92.935, 23.858), (91.61, 25.356), (90.285, 26.854), (88.96, 28.352), (87.635, 29.85), (86.309, 31.348), (84.984, 32.846), (83.659, 34.344), (82.334, 35.842), (81.009, 37.34), (79.684, 38.838), (78.359, 40.336), (77.033, 41.834), (75.708, 43.332), (74.383, 44.83), (73.058, 46.328), (71.733, 47.826), (70.408, 49.324), (69.083, 50.822), (67.757, 52.32), (66.432, 53.818), (65.107, 55.316), (63.782, 56.814), (62.457, 58.312), (61.132, 59.81), (59.807, 61.308), (59.598, 63.243), (59.554, 65.242), (59.51, 67.242), (59.466, 69.241), (59.422, 71.241), (59.378, 73.24), (59.334, 75.24), (59.29, 77.239), (59.246, 79.239), (59.203, 81.238), (59.159, 83.238), (59.115, 85.237), (59.071, 87.237), (59.027, 89.236), (58.983, 91.236), (58.939, 93.236), (58.895, 95.235), (58.851, 97.235), (58.807, 99.234), (58.763, 101.234), (58.719, 103.233), (58.675, 105.233), (58.631, 107.232), (58.587, 109.232), (58.543, 111.231), (58.499, 113.231), (58.455, 115.23), (58.412, 117.23), (59.425, 118.642), (61.145, 119.663), (62.865, 120.684), (64.585, 121.704), (66.305, 122.725), (68.025, 123.745), (69.745, 124.766), (71.465, 125.787), (73.185, 126.807), (74.905, 127.828), (76.625, 128.849), (78.345, 129.869), (80.065, 130.89), (81.785, 131.911), (83.505, 132.931), (85.225, 133.952), (86.945, 134.973), (88.665, 135.993), (90.385, 137.014), (92.105, 138.034), (93.825, 139.055), (95.545, 140.076), (97.265, 141.096), (98.985, 142.117), (100.705, 143.138), (102.424, 144.158), (104.144, 145.179), (105.864, 146.2), (107.584, 147.22), (109.304, 148.241), (111.024, 149.262), (112.744, 150.282), (114.464, 151.303), (115.987, 150.567), (117.438, 149.19), (118.888, 147.813), (120.339, 146.437), (121.789, 145.06), (123.24, 143.683), (124.691, 142.306), (126.141, 140.929), (127.592, 139.552), (129.042, 138.175), (130.493, 136.799), (131.944, 135.422), (133.394, 134.045), (134.845, 132.668), (136.295, 131.291), (137.746, 129.914), (139.197, 128.537), (140.647, 127.161), (142.098, 125.784), (143.549, 124.407), (144.999, 123.03), (146.45, 121.653), (147.9, 120.276), (149.351, 118.9), (150.802, 117.523), (151.533, 115.856), (151.443, 113.858), (151.352, 111.86), (151.261, 109.862), (151.17, 107.864), (151.079, 105.866), (150.989, 103.869), (150.898, 101.871), (150.807, 99.873), (150.716, 97.875), (150.625, 95.877), (150.534, 93.879), (150.444, 91.881), (150.353, 89.883), (150.262, 87.885), (150.171, 85.887), (150.08, 83.889), (149.99, 81.891), (149.899, 79.893), (149.808, 77.895), (149.712, 75.788), (149.712, 75.788)]
p3_rightmogo = [(157.788, 39.758), (157.819, 41.757), (157.85, 43.757), (157.882, 45.757), (157.913, 47.757), (157.944, 49.756), (157.975, 51.756), (158.007, 53.756), (158.038, 55.756), (158.069, 57.755), (158.1, 59.755), (158.132, 61.755), (158.163, 63.755), (158.194, 65.754), (158.225, 67.754), (158.257, 69.754), (158.288, 71.754), (158.319, 73.753), (158.35, 75.753), (158.382, 77.753), (158.413, 79.753), (158.444, 81.752), (158.475, 83.752), (158.507, 85.752), (158.538, 87.752), (158.569, 89.751), (158.6, 91.751), (158.632, 93.751), (158.663, 95.751), (158.694, 97.75), (158.725, 99.75), (158.757, 101.75), (158.788, 103.75), (158.819, 105.75), (158.85, 107.749), (158.881, 109.749), (158.913, 111.749), (158.944, 113.749), (158.975, 115.748), (159.006, 117.748), (159.038, 119.748), (159.069, 121.748), (159.1, 123.747), (159.131, 125.747), (159.163, 127.747), (159.194, 129.747), (159.225, 131.746), (159.256, 133.746), (159.288, 135.746), (159.319, 137.746), (159.35, 139.745), (159.381, 141.745), (159.413, 143.745), (159.444, 145.745), (159.475, 147.744), (159.506, 149.744), (159.538, 151.744), (159.569, 153.744), (159.6, 155.743), (159.631, 157.743), (159.652, 159.03), (159.652, 159.03)]
p1_5thmogo = [(164.0, -131.076), (163.293, -129.205), (162.587, -127.334), (161.88, -125.463), (161.174, -123.592), (160.467, -121.721), (159.76, -119.85), (159.054, -117.979), (158.347, -116.108), (157.641, -114.237), (156.934, -112.366), (156.227, -110.495), (155.521, -108.624), (154.814, -106.753), (154.107, -104.882), (153.401, -103.01), (152.694, -101.139), (151.988, -99.268), (151.281, -97.397), (150.574, -95.526), (149.868, -93.655), (149.161, -91.784), (148.455, -89.913), (147.748, -88.042), (147.041, -86.171), (146.335, -84.3), (145.628, -82.429), (144.922, -80.558), (144.215, -78.687), (143.508, -76.816), (142.802, -74.945), (142.095, -73.074), (141.389, -71.203), (140.682, -69.332), (139.975, -67.461), (139.269, -65.59), (138.562, -63.719), (137.856, -61.848), (137.149, -59.977), (136.442, -58.106), (135.736, -56.235), (135.029, -54.364), (134.322, -52.493), (133.616, -50.622), (132.909, -48.751), (132.203, -46.88), (131.496, -45.009), (130.789, -43.138), (130.083, -41.267), (129.376, -39.396), (128.67, -37.525), (127.963, -35.654), (127.256, -33.783), (126.55, -31.912), (125.843, -30.041), (125.137, -28.17), (124.43, -26.299), (123.723, -24.428), (123.017, -22.557), (122.31, -20.686), (121.604, -18.815), (120.897, -16.944), (119.894, -14.288), (119.894, -14.288)]
p2_5thmogo = [(116.788, -3.106), (115.463, -1.608), (114.138, -0.11), (112.812, 1.388), (111.487, 2.886), (110.162, 4.384), (108.837, 5.882), (107.512, 7.38), (106.187, 8.878), (104.862, 10.376), (103.536, 11.874), (102.211, 13.372), (100.886, 14.87), (99.561, 16.368), (98.236, 17.866), (96.911, 19.364), (95.586, 20.862), (94.26, 22.36), (92.935, 23.858), (91.61, 25.356), (90.285, 26.854), (88.96, 28.352), (87.635, 29.85), (86.309, 31.348), (84.984, 32.846), (83.659, 34.344), (82.334, 35.842), (81.009, 37.34), (79.684, 38.838), (78.359, 40.336), (77.033, 41.834), (75.708, 43.332), (74.383, 44.83), (73.058, 46.328), (71.733, 47.826), (70.408, 49.324), (69.083, 50.822), (67.757, 52.32), (66.432, 53.818), (65.107, 55.316), (63.782, 56.814), (62.457, 58.312), (61.132, 59.81), (59.807, 61.308), (59.598, 63.243), (59.554, 65.242), (59.51, 67.242), (59.466, 69.241), (59.422, 71.241), (59.378, 73.24), (59.334, 75.24), (59.29, 77.239), (59.246, 79.239), (59.203, 81.238), (59.159, 83.238), (59.115, 85.237), (59.071, 87.237), (59.027, 89.236), (58.983, 91.236), (58.939, 93.236), (58.895, 95.235), (58.851, 97.235), (58.807, 99.234), (58.763, 101.234), (58.719, 103.233), (58.675, 105.233), (58.631, 107.232), (58.587, 109.232), (58.543, 111.231), (58.499, 113.231), (58.455, 115.23), (58.412, 117.23), (59.425, 118.642), (61.145, 119.663), (62.865, 120.684), (64.585, 121.704), (66.305, 122.725), (68.025, 123.745), (69.745, 124.766), (71.465, 125.787), (73.185, 126.807), (74.905, 127.828), (76.625, 128.849), (78.345, 129.869), (80.065, 130.89), (81.785, 131.911), (83.505, 132.931), (85.225, 133.952), (86.945, 134.973), (88.665, 135.993), (90.385, 137.014), (92.105, 138.034), (93.825, 139.055), (95.545, 140.076), (97.265, 141.096), (98.985, 142.117), (100.705, 143.138), (102.424, 144.158), (104.144, 145.179), (105.864, 146.2), (107.584, 147.22), (109.304, 148.241), (111.024, 149.262), (112.744, 150.282), (114.464, 151.303), (115.987, 150.567), (117.438, 149.19), (118.888, 147.813), (120.339, 146.437), (121.789, 145.06), (123.24, 143.683), (124.691, 142.306), (126.141, 140.929), (127.592, 139.552), (129.042, 138.175), (130.493, 136.799), (131.944, 135.422), (133.394, 134.045), (134.845, 132.668), (136.295, 131.291), (137.746, 129.914), (139.197, 128.537), (140.647, 127.161), (142.098, 125.784), (143.549, 124.407), (144.999, 123.03), (146.45, 121.653), (147.9, 120.276), (149.351, 118.9), (150.802, 117.523), (151.533, 115.856), (151.443, 113.858), (151.352, 111.86), (151.261, 109.862), (151.17, 107.864), (151.079, 105.866), (150.989, 103.869), (150.898, 101.871), (150.807, 99.873), (150.716, 97.875), (150.625, 95.877), (150.534, 93.879), (150.444, 91.881), (150.353, 89.883), (150.262, 87.885), (150.171, 85.887), (150.08, 83.889), (149.99, 81.891), (149.899, 79.893), (149.808, 77.895), (149.712, 75.788), (149.712, 75.788)]

# pathfile: top_right_doinker.txt
top_right_doinker = [(123.255, -90.709, 120, 0), (124.597, -92.18, 120), (126.156, -93.432, 120), (127.765, -94.62, 120), (129.389, -95.788, 120), (131.013, -96.955, 120), (132.629, -98.133, 120), (134.233, -99.328, 120), (135.818, -100.547, 120), (137.382, -101.793, 120), (138.921, -103.071, 120), (140.432, -104.382, 120), (141.909, -105.73, 120), (143.35, -107.117, 120), (144.748, -108.546, 120), (146.101, -110.019, 120), (147.403, -111.538, 120), (148.647, -113.104, 120), (149.827, -114.718, 120), (150.938, -116.381, 120), (151.97, -118.094, 120), (152.919, -119.854, 120), (153.776, -121.661, 120), (154.535, -123.511, 120), (155.188, -125.401, 120), (155.731, -127.326, 120), (156.28, -129.956, 120, 0), (156.28, -129.956, 0, 0)]
# pathfile: toprightmogo1.txt
toprightmogo1 = [(126.251, -145.852, 120, 0), (124.373, -145.165, 120), (122.493, -144.481, 120), (120.613, -143.799, 120), (118.732, -143.12, 120), (116.85, -142.443, 120), (114.967, -141.769, 120), (113.083, -141.099, 120), (111.197, -140.431, 120), (109.311, -139.767, 120), (107.423, -139.106, 120), (105.534, -138.449, 120), (103.644, -137.796, 120), (101.752, -137.148, 120), (99.858, -136.504, 120), (97.963, -135.864, 120), (96.066, -135.231, 120), (94.168, -134.602, 120), (92.267, -133.98, 120), (90.364, -133.365, 120), (88.458, -132.757, 120), (86.551, -132.157, 120), (84.641, -131.564, 120), (82.728, -130.977, 120), (80.817, -130.389, 120), (78.925, -129.742, 120), (78.443, -128.641, 120, 0), (78.443, -128.641, 0, 0)]

# pathfile: toprightmogo2.txt
toprightmogo2 = [(87.527, -132.466, 120, 0), (89.377, -133.226, 120), (91.227, -133.986, 120), (93.077, -134.746, 120), (94.927, -135.505, 120), (96.777, -136.265, 120), (98.627, -137.025, 120), (100.477, -137.785, 120), (102.327, -138.545, 120), (104.177, -139.305, 120), (106.027, -140.065, 120), (107.877, -140.824, 120), (109.727, -141.584, 120), (111.577, -142.344, 120), (113.427, -143.104, 120), (115.277, -143.864, 120), (117.127, -144.624, 120), (118.977, -145.384, 120), (120.827, -146.144, 120), (122.677, -146.903, 120), (124.527, -147.663, 120), (126.377, -148.423, 120), (128.227, -149.183, 120), (130.077, -149.943, 120), (131.927, -150.703, 120), (133.777, -151.463, 120), (135.627, -152.223, 120), (137.477, -152.982, 120), (139.327, -153.742, 120), (141.177, -154.502, 120), (143.027, -155.262, 120), (144.877, -156.022, 120), (146.082, -156.517, 120, 0), (146.082, -156.517, 0, 0)]


topleftmogo2 = [(x, -y) for x, y, *_ in toprightmogo2]
lastmogo = [(154.274, 147.604), (153.649, 145.704), (153.081, 143.787), (152.564, 141.855), (152.091, 139.911), (151.657, 137.959), (151.256, 136.0), (150.887, 134.034), (150.541, 132.064), (150.216, 130.091), (149.906, 128.115), (149.609, 126.137), (149.321, 124.158), (149.037, 122.178), (148.753, 120.199), (148.467, 118.219), (148.173, 116.241), (147.868, 114.264), (147.547, 112.29), (147.205, 110.32), (146.837, 108.354), (146.436, 106.394), (145.997, 104.443), (145.511, 102.503), (144.971, 100.578), (144.367, 98.671), (143.688, 96.79), (142.921, 94.943), (142.051, 93.143), (141.066, 91.403), (139.955, 89.74), (138.699, 88.185), (137.298, 86.759), (135.752, 85.493), (134.071, 84.411), (132.281, 83.522), (130.401, 82.844), (128.462, 82.358), (126.486, 82.051), (124.492, 81.906), (122.493, 81.901), (120.496, 82.017), (118.51, 82.246), (116.535, 82.563), (114.576, 82.961), (112.631, 83.427), (110.703, 83.958), (108.789, 84.539), (106.89, 85.167), (105.008, 85.842), (103.139, 86.554), (101.283, 87.3), (99.44, 88.077), (97.609, 88.882), (95.79, 89.713), (93.982, 90.567), (91.023, 92.02), (91.023, 92.02)]
passivehang = [(88.148, 100.166), (86.801, 98.687), (85.459, 97.205), (84.12, 95.719), (82.785, 94.23), (81.454, 92.737), (80.127, 91.241), (78.802, 89.742), (77.481, 88.241), (76.163, 86.737), (74.847, 85.23), (73.534, 83.722), (72.224, 82.211), (70.916, 80.698), (69.61, 79.183), (68.307, 77.666), (67.005, 76.148), (65.705, 74.628), (64.406, 73.107), (63.11, 71.584), (61.814, 70.06), (60.52, 68.535), (59.227, 67.009), (57.936, 65.483), (56.645, 63.955), (55.355, 62.427), (54.065, 60.898), (52.777, 59.368), (51.489, 57.838), (50.201, 56.308), (48.914, 54.777), (47.626, 53.247), (46.339, 51.716), (45.052, 50.185), (43.765, 48.654), (42.478, 47.123), (41.19, 45.593), (39.902, 44.063), (38.614, 42.533), (37.325, 41.004), (36.035, 39.476), (34.744, 37.948), (33.453, 36.421), (32.161, 34.894), (30.867, 33.369), (29.572, 31.844), (28.276, 30.321), (26.979, 28.799), (25.68, 27.278), (24.379, 25.759), (23.077, 24.241), (21.773, 22.724), (20.467, 21.21), (19.159, 19.697), (17.849, 18.186), (16.537, 16.676), (15.222, 15.169), (13.905, 13.664), (12.585, 12.162), (11.262, 10.662), (9.937, 9.164), (8.537, 7.589), (8.537, 7.589)]
passivehangreverse = passivehang[::-1] 

# Wall stakes test paths
wallStakeTestp1 = [(-119.221, 68.281), (-117.538, 67.201), (-115.841, 66.142), (-114.13, 65.107), (-112.404, 64.096), (-110.662, 63.113), (-108.904, 62.161), (-107.129, 61.238), (-105.337, 60.351), (-103.527, 59.501), (-101.698, 58.69), (-99.851, 57.923), (-97.985, 57.205), (-96.1, 56.536), (-94.196, 55.924), (-92.273, 55.376), (-90.332, 54.894), (-88.374, 54.485), (-86.402, 54.157), (-84.417, 53.915), (-82.422, 53.767), (-80.423, 53.723), (-78.424, 53.785), (-76.433, 53.962), (-74.454, 54.255), (-72.499, 54.673), (-70.573, 55.21), (-68.684, 55.867), (-66.839, 56.637), (-65.041, 57.514), (-63.295, 58.488), (-61.6, 59.549), (-59.954, 60.685), (-58.351, 61.881), (-56.785, 63.125), (-55.244, 64.4), (-53.714, 65.687), (-52.173, 66.962), (-50.595, 68.19), (-48.939, 69.311), (-47.159, 70.217), (-45.56, 71.417), (-43.967, 72.626), (-42.374, 73.835), (-40.78, 75.043), (-39.187, 76.252), (-37.594, 77.461), (-36.0, 78.67), (-34.407, 79.879), (-32.814, 81.088), (-31.22, 82.297), (-29.627, 83.506), (-28.034, 84.714), (-26.44, 85.923), (-24.847, 87.132), (-23.254, 88.341), (-21.66, 89.55), (-20.067, 90.759), (-18.474, 91.968), (-16.881, 93.176), (-15.287, 94.385), (-13.694, 95.594), (-12.101, 96.803), (-10.507, 98.012), (-8.914, 99.221), (-7.321, 100.43), (-5.727, 101.639), (-4.134, 102.847), (-2.541, 104.056), (-1.425, 104.903), (-1.425, 104.903)]
wallStakeTestp2 = [(-1.425, 104.903), (-1.425, 106.903), (-1.425, 108.903), (-1.425, 110.903), (-1.425, 112.903), (-1.425, 114.903), (-1.425, 116.903), (-1.425, 118.903), (-1.425, 120.903), (-1.425, 122.903), (-1.425, 124.903), (-1.424, 126.903), (-1.424, 128.903), (-1.424, 130.903), (-1.424, 132.903), (-1.424, 134.903), (-1.424, 136.903), (-1.424, 138.903), (-1.424, 140.903), (-1.424, 142.903), (-1.424, 144.903), (-1.424, 146.903), (-1.424, 148.903), (-1.424, 150.903), (-1.424, 152.903), (-1.424, 154.903), (-1.424, 156.903), (-1.423, 158.903), (-1.423, 160.903), (-1.423, 162.903), (-1.423, 164.903), (-1.423, 166.903), (-1.423, 168.903), (-1.423, 170.903), (-1.423, 172.903), (-1.423, 174.903), (-1.423, 176.911), (-1.423, 176.911)]
wallStakeTestp2part2 = [(-19.446, 95.807), (-17.971, 97.157), (-16.506, 98.519), (-15.055, 99.896), (-13.623, 101.292), (-12.216, 102.713), (-10.837, 104.162), (-9.494, 105.644), (-8.193, 107.163), (-6.942, 108.723), (-5.747, 110.326), (-4.614, 111.974), (-3.549, 113.667), (-2.557, 115.403), (-1.638, 117.18), (-0.795, 118.993), (-0.028, 120.84), (0.668, 122.715), (1.296, 124.614), (1.858, 126.533), (2.361, 128.469), (2.81, 130.418), (3.206, 132.378), (3.557, 134.347), (3.867, 136.322), (4.139, 138.304), (4.377, 140.29), (4.584, 142.279), (4.763, 144.271), (4.916, 146.265), (5.046, 148.261), (5.155, 150.258), (5.245, 152.256), (5.317, 154.254), (5.373, 156.254), (5.415, 158.253), (5.443, 160.253), (5.459, 162.253), (5.463, 164.253), (5.457, 166.253), (5.441, 168.253), (5.416, 170.253), (5.383, 172.252), (5.342, 174.252), (5.294, 176.251), (5.24, 178.251), (5.179, 180.25), (5.112, 182.249), (5.04, 184.247), (4.963, 186.246), (4.845, 189.104), (4.845, 189.104)]
wallStakeTestp2part3 = [(-1.423, 176.911), (-1.323, 174.914), (-1.223, 172.916), (-1.122, 170.919), (-1.022, 168.921), (-0.922, 166.924), (-0.822, 164.926), (-0.722, 162.929), (-0.622, 160.931), (-0.521, 158.934), (-0.421, 156.936), (-0.321, 154.939), (-0.221, 152.941), (-0.121, 150.944), (-0.067, 149.867), (-0.067, 149.867)]
wallStakeTestp3 = [(-1.423, 176.911), (-1.323, 174.914), (-1.223, 172.916), (-1.122, 170.919), (-1.022, 168.921), (-0.922, 166.924), (-0.822, 164.926), (-0.722, 162.929), (-0.622, 160.931), (-0.521, 158.934), (-0.421, 156.936), (-0.321, 154.939), (-0.221, 152.941), (-0.121, 150.944), (-0.067, 149.867), (-0.067, 149.867)]
wallStakeTestp4 = [(-0.067, 149.867), (-0.039, 147.867), (-0.011, 145.867), (0.017, 143.867), (0.045, 141.868), (0.072, 139.868), (0.1, 137.868), (0.128, 135.868), (0.156, 133.868), (0.184, 131.869), (0.212, 129.869), (0.239, 127.869), (0.267, 125.869), (0.295, 123.869), (0.323, 121.87), (0.351, 119.87), (0.378, 117.87), (0.406, 115.87), (0.434, 113.87), (0.462, 111.871), (0.474, 110.985), (0.474, 110.985)]

rightwallStakeTestp1 = [(x, -y) for (x, y) in wallStakeTestp1]
rightwallStakeTestp2 = [(x, -y) for (x, y) in wallStakeTestp2]
rightwallStakeTestp2part2 = [(x, -y) for (x, y) in wallStakeTestp2part2]
rightwallStakeTestp2part3 = [(x, -y) for (x, y) in wallStakeTestp2part3]
rightwallStakeTestp3 = [(x, -y) for (x, y) in wallStakeTestp3]
rightwallStakeTestp4 = [(x, -y) for (x, y) in wallStakeTestp4]

#---------------------------------------------------------------------------------------------------------------------------------------------------


p1redleft8points = [(-148.184, 118.884), (-146.518, 117.778), (-144.852, 116.672), (-143.186, 115.566), (-141.519, 114.46), (-139.853, 113.354), (-138.187, 112.247), (-136.52, 111.141), (-134.854, 110.035), (-133.188, 108.929), (-131.522, 107.823), (-129.855, 106.717), (-128.189, 105.611), (-126.523, 104.505), (-124.856, 103.398), (-123.19, 102.292), (-121.524, 101.186), (-119.858, 100.08), (-118.191, 98.974), (-116.525, 97.868), (-114.859, 96.762), (-113.193, 95.655), (-111.526, 94.549), (-109.86, 93.443), (-108.194, 92.337), (-106.527, 91.231), (-104.861, 90.125), (-103.195, 89.019), (-101.529, 87.913), (-99.862, 86.806), (-98.196, 85.7), (-96.53, 84.594), (-94.864, 83.488), (-93.197, 82.382), (-91.531, 81.276), (-89.865, 80.17), (-88.198, 79.064), (-86.532, 77.957), (-84.866, 76.851), (-83.2, 75.745), (-81.533, 74.639), (-79.867, 73.533), (-78.201, 72.427), (-76.535, 71.321), (-74.868, 70.214), (-73.202, 69.108), (-71.536, 68.002), (-69.869, 66.896), (-68.203, 65.79), (-66.537, 64.684), (-64.871, 63.578), (-63.204, 62.472), (-61.538, 61.365), (-59.872, 60.259), (-58.205, 59.153)] #, (-56.539, 58.047), (-54.873, 56.941), (-53.207, 55.835), (-51.205, 54.506), (-51.205, 54.506)

p2redleft8points =[(-51.205, 54.506), (-49.224, 54.232), (-47.231, 54.08), (-45.231, 54.069), (-43.237, 54.216), (-41.264, 54.536), (-39.328, 55.038), (-37.451, 55.726), (-35.651, 56.596), (-33.945, 57.638), (-32.344, 58.835), (-30.855, 60.169), (-29.48, 61.621), (-28.217, 63.17), (-27.059, 64.8), (-26.001, 66.497), (-25.033, 68.247), (-24.153, 70.043), (-23.35, 71.874), (-22.617, 73.735), (-21.946, 75.619), (-21.337, 77.524), (-20.781, 79.445), (-20.273, 81.379), (-19.813, 83.326), (-19.391, 85.281), (-19.012, 87.244), (-18.665, 89.214), (-18.355, 91.19), (-18.073, 93.17), (-17.822, 95.154), (-17.597, 97.141), (-17.397, 99.131), (-17.222, 101.123), (-17.067, 103.117), (-16.936, 105.113), (-16.822, 107.11), (-16.729, 109.108), (-16.653, 111.106), (-16.593, 113.105), (-16.55, 115.105), (-16.522, 117.105), (-16.508, 119.104), (-16.508, 121.104), (-16.52, 123.104), (-16.546, 125.104), (-16.583, 127.104), (-16.631, 129.103), (-16.69, 131.102), (-16.759, 133.101), (-16.838, 135.1), (-16.925, 137.098), (-17.021, 139.095), (-17.125, 141.093), (-17.237, 143.09), (-17.356, 145.086), (-17.481, 147.082), (-17.612, 149.078), (-17.748, 151.073), (-17.887, 153.068), (-18.031, 155.063), (-18.191, 157.263), (-18.191, 157.263)]

#p3redleft8points = [(-117.676, 127.862), (-115.676, 127.871), (-113.676, 127.88), (-111.676, 127.889), (-109.676, 127.898), (-107.676, 127.907), (-105.676, 127.916), (-103.676, 127.925), (-101.676, 127.934), (-99.676, 127.943), (-97.676, 127.952), (-95.676, 127.961), (-93.676, 127.97), (-91.676, 127.979), (-89.676, 127.988), (-87.676, 127.997), (-85.676, 128.006), (-83.676, 128.015), (-81.676, 128.024), (-79.676, 128.033), (-77.676, 128.042), (-75.676, 128.051), (-73.676, 128.06), (-71.676, 128.069), (-69.676, 128.078), (-67.677, 128.087), (-65.677, 128.095), (-63.677, 128.104), (-61.677, 128.113), (-59.677, 128.122), (-57.677, 128.131), (-55.677, 128.14), (-53.677, 128.149), (-51.677, 128.158), (-49.677, 128.167), (-47.677, 128.176), (-45.677, 128.185), (-43.677, 128.194), (-41.677, 128.203), (-39.677, 128.212), (-37.677, 128.221), (-35.677, 128.23), (-33.677, 128.239), (-31.677, 128.248), (-29.677, 128.257), (-26.811, 128.27), (-26.811, 128.27)]

#p4redleft8points = [(-26.811, 128.27), (-28.674, 127.543), (-30.537, 126.815), (-32.4, 126.088), (-34.263, 125.361), (-36.126, 124.633), (-37.989, 123.906), (-39.852, 123.178), (-41.715, 122.451), (-43.578, 121.724), (-45.441, 120.996), (-47.304, 120.269), (-49.168, 119.542), (-51.031, 118.814), (-52.894, 118.087), (-54.757, 117.359), (-56.62, 116.632), (-58.483, 115.905), (-60.346, 115.177), (-62.209, 114.45), (-64.072, 113.723), (-65.935, 112.995), (-67.798, 112.268), (-69.661, 111.541), (-71.524, 110.813), (-73.387, 110.086), (-75.25, 109.358), (-77.113, 108.631), (-78.976, 107.904), (-80.839, 107.176), (-82.702, 106.449), (-84.565, 105.722), (-86.301, 105.044), (-86.301, 105.044)]

#p5redleft8points = [(-87.523, 109.119), (-85.523, 109.119), (-83.523, 109.119), (-81.523, 109.119), (-79.523, 109.119), (-77.523, 109.119), (-75.523, 109.119), (-73.523, 109.119), (-71.523, 109.119), (-69.523, 109.119), (-67.523, 109.119), (-65.523, 109.119), (-63.523, 109.119), (-61.523, 109.119), (-59.523, 109.119), (-57.523, 109.119), (-55.523, 109.119), (-53.523, 109.119), (-51.523, 109.119), (-49.523, 109.119), (-47.523, 109.119), (-45.523, 109.119), (-43.523, 109.119), (-41.523, 109.119), (-39.523, 109.119), (-37.523, 109.119), (-35.523, 109.119), (-33.523, 109.119), (-31.523, 109.119), (-29.523, 109.119), (-27.626, 109.119), (-27.626, 109.119)]

p3redleft8points = [(-18.191, 157.263), (-19.67, 155.916), (-21.149, 154.57), (-22.627, 153.223), (-24.106, 151.877), (-25.585, 150.53), (-27.064, 149.184), (-28.543, 147.837), (-30.021, 146.491), (-31.5, 145.144), (-32.979, 143.798), (-34.458, 142.451), (-35.937, 141.105), (-37.416, 139.758), (-38.894, 138.412), (-40.373, 137.065), (-41.852, 135.719), (-43.331, 134.372), (-44.81, 133.026), (-46.288, 131.679), (-47.767, 130.333), (-49.246, 128.986), (-50.725, 127.64), (-52.204, 126.293), (-53.682, 124.946), (-55.161, 123.6), (-56.64, 122.253), (-58.119, 120.907), (-59.598, 119.56), (-61.076, 118.214), (-62.555, 116.867), (-64.034, 115.521), (-65.513, 114.174), (-66.992, 112.828), (-68.471, 111.481), (-69.949, 110.135), (-71.428, 108.788), (-72.855, 107.489), (-72.855, 107.489)]

p4redleft8points = [(-72.855, 107.489), (-72.608, 109.474), (-72.415, 111.464), (-72.281, 113.46), (-72.208, 115.458), (-72.199, 117.458), (-72.267, 119.457), (-72.41, 121.451), (-72.627, 123.439), (-72.933, 125.415), (-73.326, 127.376), (-73.806, 129.317), (-74.385, 131.231), (-75.055, 133.115), (-75.825, 134.961), (-76.692, 136.763), (-77.651, 138.517), (-78.71, 140.214), (-79.855, 141.853), (-81.087, 143.428), (-82.403, 144.934), (-83.791, 146.373), (-85.25, 147.741), (-86.775, 149.035), (-88.355, 150.261), (-89.986, 151.417), (-91.666, 152.502), (-93.386, 153.523), (-95.142, 154.479), (-96.932, 155.372), (-98.749, 156.208), (-100.591, 156.985), (-102.456, 157.708), (-104.339, 158.382), (-106.24, 159.003), (-108.155, 159.58), (-110.083, 160.113), (-112.022, 160.601), (-113.971, 161.052), (-115.928, 161.462), (-117.893, 161.836), (-119.864, 162.176), (-121.84, 162.481), (-123.821, 162.755), (-125.806, 162.999), (-127.795, 163.212), (-129.786, 163.399), (-131.78, 163.558), (-133.775, 163.692), (-135.772, 163.8), (-137.771, 163.884), (-139.77, 163.946), (-141.769, 163.985), (-143.769, 164.003), (-145.769, 164.0), (-147.769, 163.978), (-149.768, 163.937), (-151.768, 163.878), (-153.766, 163.805), (-155.774, 163.719), (-155.774, 163.719)]

p5redleft8points = [(-155.774, 163.719), (-153.774, 163.704), (-151.774, 163.69), (-149.774, 163.675), (-147.774, 163.66), (-145.774, 163.645), (-143.774, 163.631), (-141.774, 163.616), (-139.774, 163.601), (-137.774, 163.586), (-135.775, 163.572), (-133.775, 163.557), (-131.775, 163.542), (-129.775, 163.527), (-127.775, 163.513), (-125.775, 163.498), (-123.775, 163.483), (-121.775, 163.468), (-119.775, 163.454), (-117.775, 163.439), (-115.775, 163.424), (-113.775, 163.409), (-111.775, 163.395), (-109.775, 163.38), (-107.775, 163.365), (-105.775, 163.35), (-103.775, 163.336), (-101.775, 163.321), (-100.562, 163.312), (-100.562, 163.312)]

p6redleft8points = [(-100.562, 163.719), (-102.487, 163.177), (-104.403, 162.604), (-106.309, 161.998), (-108.203, 161.357), (-110.085, 160.68), (-111.953, 159.964), (-113.804, 159.208), (-115.638, 158.411), (-117.453, 157.57), (-119.246, 156.683), (-121.014, 155.75), (-122.757, 154.769), (-124.47, 153.738), (-126.152, 152.656), (-127.8, 151.522), (-129.41, 150.336), (-130.979, 149.096), (-132.498, 147.796), (-133.969, 146.441), (-135.389, 145.033), (-136.754, 143.571), (-138.052, 142.05), (-139.289, 140.479), (-140.46, 138.857), (-141.554, 137.184), (-142.581, 135.468), (-143.525, 133.705), (-144.396, 131.905), (-145.185, 130.067), (-145.897, 128.198), (-146.527, 126.3), (-147.08, 124.378), (-147.552, 122.435), (-147.951, 120.476), (-148.271, 118.502), (-148.524, 116.518), (-148.699, 114.526), (-148.812, 112.529), (-148.855, 110.53), (-148.837, 108.53), (-148.759, 106.531), (-148.621, 104.536), (-148.43, 102.545), (-148.183, 100.561), (-147.886, 98.583), (-147.542, 96.613), (-147.148, 94.652), (-146.71, 92.701), (-146.229, 90.76), (-145.707, 88.829), (-145.144, 86.91), (-144.541, 85.003), (-143.9, 83.109), (-143.221, 81.227), (-142.506, 79.36), (-141.753, 77.507), (-140.964, 75.669), (-140.135, 73.849), (-139.266, 72.048), (-138.348, 70.271), (-137.35, 68.538), (-137.234, 68.373), (-137.234, 68.373)]

p7redleft8points = [(-137.234, 68.373), (-136.733, 66.437), (-136.233, 64.5), (-135.732, 62.564), (-135.232, 60.628), (-134.731, 58.691), (-134.23, 56.755), (-133.73, 54.819), (-133.229, 52.882), (-132.728, 50.946), (-132.228, 49.01), (-131.727, 47.073), (-131.227, 45.137), (-130.726, 43.201), (-130.225, 41.264), (-129.725, 39.328), (-129.224, 37.392), (-128.724, 35.455), (-128.223, 33.519), (-127.722, 31.583), (-127.222, 29.646), (-126.721, 27.71), (-126.22, 25.774), (-125.72, 23.837), (-125.219, 21.901), (-124.719, 19.965), (-124.218, 18.028), (-123.717, 16.092), (-123.217, 14.156), (-122.716, 12.219), (-122.215, 10.283), (-121.715, 8.347), (-121.214, 6.41), (-120.714, 4.474), (-120.213, 2.538), (-119.712, 0.601), (-119.212, -1.335), (-118.711, -3.271), (-118.211, -5.208), (-117.71, -7.144), (-117.209, -9.08), (-116.709, -11.017), (-116.208, -12.953), (-115.638, -15.158), (-115.638, -15.158)]

#p9redleft8points = [(-115.638, -15.158), (-114.906, -13.297), (-114.174, -11.436), (-113.442, -9.574), (-112.71, -7.713), (-111.978, -5.852), (-111.246, -3.991), (-110.514, -2.13), (-109.782, -0.268), (-109.05, 1.593), (-108.318, 3.454), (-107.586, 5.315), (-106.853, 7.177), (-106.121, 9.038), (-105.389, 10.899), (-104.657, 12.76), (-103.925, 14.621), (-103.193, 16.483), (-102.461, 18.344), (-101.729, 20.205), (-100.997, 22.066), (-100.265, 23.927), (-99.533, 25.789), (-98.801, 27.65), (-98.069, 29.511), (-97.337, 31.372), (-96.605, 33.234), (-95.873, 35.095), (-95.141, 36.956), (-94.409, 38.817), (-93.677, 40.678), (-92.945, 42.54), (-92.213, 44.401), (-91.481, 46.262), (-90.749, 48.123), (-90.016, 49.984), (-89.284, 51.846), (-88.552, 53.707), (-87.82, 55.568), (-87.088, 57.429), (-86.356, 59.291), (-85.624, 61.152), (-84.892, 63.013), (-84.16, 64.874), (-83.428, 66.735), (-82.696, 68.597), (-81.964, 70.458), (-81.232, 72.319), (-80.5, 74.18), (-79.768, 76.041), (-79.036, 77.903), (-78.304, 79.764), (-77.572, 81.625), (-76.84, 83.486), (-76.108, 85.347), (-75.376, 87.209), (-74.644, 89.07), (-73.912, 90.931), (-73.18, 92.792), (-72.447, 94.654), (-71.715, 96.515), (-70.983, 98.376), (-70.251, 100.237), (-69.519, 102.098), (-68.787, 103.96), (-68.055, 105.821), (-67.323, 107.682), (-66.591, 109.543), (-65.859, 111.404), (-65.127, 113.266), (-64.395, 115.127), (-63.663, 116.988), (-62.931, 118.849), (-62.199, 120.711), (-61.467, 122.572), (-60.735, 124.433), (-60.003, 126.294), (-59.271, 128.155), (-58.539, 130.017), (-57.807, 131.878), (-57.075, 133.739), (-56.343, 135.6), (-55.61, 137.461), (-54.878, 139.323), (-54.146, 141.184), (-53.296, 143.346), (-53.296, 143.346)]

p8redleft8points = [(-115.638, -15.158), (-115.682, -13.158), (-115.718, -11.159), (-115.742, -9.159), (-115.75, -7.159), (-115.747, -5.159), (-115.731, -3.159), (-115.696, -1.159), (-115.649, 0.84), (-115.588, 2.839), (-115.505, 4.837), (-115.406, 6.835), (-115.29, 8.831), (-115.157, 10.827), (-115.0, 12.821), (-114.821, 14.813), (-114.62, 16.803), (-114.397, 18.79), (-114.149, 20.775), (-113.875, 22.756), (-113.572, 24.733), (-113.237, 26.704), (-112.87, 28.67), (-112.469, 30.63), (-112.032, 32.582), (-111.557, 34.524), (-111.037, 36.455), (-110.472, 38.374), (-109.857, 40.277), (-109.191, 42.162), (-108.47, 44.028), (-107.686, 45.868), (-106.832, 47.676), (-105.911, 49.451), (-104.908, 51.181), (-103.826, 52.862), (-102.65, 54.48), (-101.385, 56.028), (-100.018, 57.488), (-98.551, 58.846), (-96.985, 60.089), (-95.324, 61.201), (-93.573, 62.166), (-91.745, 62.974), (-89.852, 63.618), (-87.911, 64.095), (-85.936, 64.408), (-83.943, 64.563), (-81.944, 64.57), (-79.948, 64.44), (-77.965, 64.185), (-76.0, 63.817), (-74.056, 63.348), (-72.137, 62.784), (-70.245, 62.137), (-68.38, 61.415), (-66.542, 60.627), (-64.731, 59.778), (-62.949, 58.871), (-61.193, 57.914), (-59.462, 56.911), (-57.759, 55.863), (-56.08, 54.776), (-54.426, 53.652), (-52.797, 52.492), (-51.189, 51.302), (-49.607, 50.079), (-48.047, 48.828), (-46.509, 47.549), (-44.994, 46.244), (-43.499, 44.915), (-42.029, 43.559), (-40.579, 42.181), (-39.035, 40.665), (-39.035, 40.665)]

#---------------------------------------------------------------------------------------------------------------------------------------------------


# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    #urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

#gyro start
gyro = Inertial(Ports.PORT11)
gyro.orientation(OrientationType.YAW)
gyro.calibrate()
gyro.set_rotation(0, DEGREES)
gyro.set_heading(0, DEGREES)
 
 
gear_ratio = 3/4
tolerance = 6
lookahead = 50
current_x = -1
current_y =  -1
previous_right_encoder = 0
previous_left_encoder = 0
robot_not_walking = 0
MAX_WAIT_FOR_NO_WALK= 20
forward_velocity = 40
turn_velocity_k = 40
left_velocity = 5
right_velocity = 5
#forward_velocity/100
wheel_circumference = 8.6393798
feet_to_unit = 2.5
gear_ratio = 3/4
current_angle = 0

def leftEncoder():
    global left_rotational_sensor
    return left_rotational_sensor.position(DEGREES)

def rightEncoder():
    global right_rotational_sensor
    return right_rotational_sensor.position(DEGREES)
 
def update_position():
    global current_x, current_y, current_angle, previous_left_encoder, previous_right_encoder, robot_not_walking

    # Calculate the distance traveled by each wheel
    left_encoder = ((leftEncoder() / 360) * wheel_circumference * gear_ratio) * feet_to_unit
    right_encoder = ((rightEncoder() / 360) * wheel_circumference * gear_ratio) * feet_to_unit
    delta_left = left_encoder - previous_left_encoder
    delta_right = right_encoder - previous_right_encoder
    #print("delta_left: "+ str(delta_left)+" delta_rhgt: " + str(delta_right) + " left_enc: " + str(left_encoder) + " right_enc: " + str(right_encoder))
    # Update previous encoder values

    if delta_left == delta_right and delta_left == 0:
        robot_not_walking = robot_not_walking + 1
    else:
        robot_not_walking = 0
    previous_left_encoder = left_encoder
    previous_right_encoder = right_encoder
   
    current_angle = 2* math.pi - math.radians(gyro.heading(DEGREES))
   
    # Calculate the robot's linear change
    delta_d = (delta_left + delta_right) / 2
   
    current_y += delta_d * math.sin(current_angle)
    current_x += delta_d * math.cos(current_angle)
    #print("x: "+ str(current_x)+" y: " + str(current_y) + " angle: " + str(current_angle))
 
def calculate_lookahead_point(points_list, lookahead_distance):
    global current_x, current_y, start_pos_size, forward_velocity, tolerance
    closest_offset = -1
    lookahead_offset = -1
    closest_distance = float('inf')

    #if len(points_list) == 0:
    #    return
    min_distance = float('inf')
    min_index = -1  # To keep track of the nearest valid point index

    num_points = len(points_list)  # Number of points to check
    for i in range(num_points-1):
        dist = math.sqrt((points_list[i][0] - current_x) ** 2 + (points_list[i][1] - current_y) ** 2)    
        if dist < tolerance:
            min_index = i
    if min_index != -1:
        del points_list[:min_index]
        min_index = -1
        num_points = len(points_list)  # Number of points to check

    if len(points_list) == 0:
        return
    lookahead_point = None
    closest_point = points_list[0]
    for i in range(num_points-1):
        start = points_list[i]
        end = points_list[i + 1]
        segment_length = math.sqrt((end[0] - start[0]) ** 2 + (end[1] - start[1]) ** 2)
        if segment_length == 0:
            continue
        t = ((current_x - start[0]) * (end[0] - start[0]) + (current_y - start[1]) * (end[1] - start[1])) / segment_length ** 2
        t = max(0, min(1, t))
        closest_x = start[0] + t * (end[0] - start[0])
        closest_y = start[1] + t * (end[1] - start[1])
        distance = math.sqrt((closest_x - current_x) ** 2 + (closest_y - current_y) ** 2)

        if len(points_list) == 2 and distance <  2* tolerance:
            closest_point = (points_list[1][0], points_list[1][1])
            del points_list[0]
            break

        if distance < closest_distance:
            closest_distance = distance
            closest_offset = i
            closest_point = (closest_x, closest_y)

        if distance >= lookahead_distance:
            if lookahead_point is None:
                temp_smallest_lookahead_distance = distance
                lookahead_offset = i
                lookahead_point = (closest_x, closest_y)
            elif distance < temp_smallest_lookahead_distance:
                temp_smallest_lookahead_distance = distance
                lookahead_offset = i
                lookahead_point = (closest_x, closest_y)

    if closest_offset > 0 and lookahead_point is None:
        #print("Dropping1 :" + str(points_list[:closest_offset]))
        del points_list[:closest_offset]
        closest_offset = 0
    if lookahead_point:
        #print("Dropping2 :" + str(points_list[:lookahead_offset]))
        del points_list[:lookahead_offset]
    return lookahead_point if lookahead_point else closest_point

# Function to calculate drive speeds
def calculate_drive_speeds(lookahead_point, direction):
    global current_x, current_y, current_angle, left_velocity, right_velocity, forward_velocity, turn_velocity_k
    dx = lookahead_point[0] - current_x
    dy = lookahead_point[1] - current_y

    # Calculate the angle to the target point
    point_angle = math.atan2(dy, dx)
   
    # Adjust the current angle based on the direction
    adjusted_current_angle = current_angle
    if direction == -1:
        adjusted_current_angle += math.pi  # Add 180 degrees (π radians) to the current angle

    # Normalize the adjusted current angle to be within the range [-π, π]
    adjusted_current_angle = (adjusted_current_angle + math.pi) % (2 * math.pi) - math.pi

    # Calculate the angle difference between the adjusted current heading and the target point
    point_angle_diff = point_angle - adjusted_current_angle


    # Normalize the angle difference to be within the range [-π, π]
    if point_angle_diff > math.pi:
        point_angle_diff -= 2 * math.pi
    elif point_angle_diff < -math.pi:
        point_angle_diff += 2 * math.pi

    #point_angle_diff = (point_angle_diff + math.pi) % (2 * math.pi) - math.pi

    # Calculate the wheel velocities based on the specified direction
    curr_forward_velocity = forward_velocity * direction
    curr_turn_velocity_k = turn_velocity_k
    left_velocity = curr_forward_velocity - point_angle_diff * curr_turn_velocity_k
    right_velocity = curr_forward_velocity + point_angle_diff * curr_turn_velocity_k

    # Clamp the velocities to the range [-100, 100]
    left_velocity = max(min(left_velocity, 100), -100)
    right_velocity = max(min(right_velocity, 100), -100)

    global current_x, current_y, current_angle, left_velocity, right_velocity, forward_velocity, turn_velocity_k
    dx = lookahead_point[0] - current_x
    dy = lookahead_point[1] - current_y

    # Calculate the angle to the target point
    point_angle = math.atan2(dy, dx)
   
    # Adjust the current angle based on the direction
    adjusted_current_angle = current_angle
    if direction == -1:
        adjusted_current_angle += math.pi  # Add 180 degrees (π radians) to the current angle

    # Normalize the adjusted current angle to be within the range [-π, π]
    adjusted_current_angle = (adjusted_current_angle + math.pi) % (2 * math.pi) - math.pi

    # Calculate the angle difference between the adjusted current heading and the target point
    point_angle_diff = point_angle - adjusted_current_angle


    # Normalize the angle difference to be within the range [-π, π]
    if point_angle_diff > math.pi:
        point_angle_diff -= 2 * math.pi
    elif point_angle_diff < -math.pi:
        point_angle_diff += 2 * math.pi

    #point_angle_diff = (point_angle_diff + math.pi) % (2 * math.pi) - math.pi

    # Calculate the wheel velocities based on the specified direction
    curr_forward_velocity = forward_velocity * direction
    curr_turn_velocity_k = turn_velocity_k
    left_velocity = curr_forward_velocity - point_angle_diff * curr_turn_velocity_k
    right_velocity = curr_forward_velocity + point_angle_diff * curr_turn_velocity_k

    # Clamp the velocities to the range [-100, 100]
    left_velocity = max(min(left_velocity, 100), -100)
    right_velocity = max(min(right_velocity, 100), -100)

def walk_path(points_list, lookahead_distance, stop_threshold, direction, decl = False, decl_dis = 22, decl_rate = 0.6, last_point_tolerance = 2.5):

    global current_x, current_y, start_pos_size, forward_velocity, turn_velocity_k, left_velocity, right_velocity, robot_not_walking
   
    original_list = len(points_list)

    numDeceleratePoints = 0
    start_pos_size = len(points_list)

    if current_x == -1:
        current_x = points_list[0][0]
        current_y = points_list[0][1]

    running = True
    while running:
        adjust_high_scoring_motor_position()
        check_vision_sensor()
        stall_detection_and_handling()
        if len(points_list) == 0 or robot_not_walking > MAX_WAIT_FOR_NO_WALK:
            running = False
            robot_not_walking = 0
            break

        # Calculate the lookahead point
        next_point = calculate_lookahead_point(points_list, lookahead_distance)

        # Calculate drive speeds based on the specified direction
        calculate_drive_speeds(next_point, direction)
        #print("x: "+ str(current_x)+" y: " + str(current_y) + " angle: " + str(current_angle) + " lspeed" + str(left_velocity) + " rspeed" + str(right_velocity))
        #len(points_list) < original_list/10 and
        if (len(points_list) != 0):
            dis_to_end = math.sqrt((points_list[-1][0] - current_x) ** 2 + (points_list[-1][1] - current_y) ** 2)
            #print(dis_to_end)
            if dis_to_end < decl_dis and decl:
                #print("declerating" + str((dis_to_end/(dis_to_end+5))) + " " + str(len(points_list)))
                if (dis_to_end < decl_dis /2):
                    decl_rate = 0.4
                    left_velocity = left_velocity * decl_rate
                    right_velocity = right_velocity * decl_rate
                else:
                    left_velocity = left_velocity * (dis_to_end/(dis_to_end+(dis_to_end/2))) * decl_rate
                    right_velocity = right_velocity * (dis_to_end/(dis_to_end+(dis_to_end/2))) * decl_rate
       
        # Update the robot's position/stop
        update_position()

        # Check if the robot has reached the current target point
        distance_to_point = math.sqrt((points_list[0][0] - current_x) ** 2 + (points_list[0][1] - current_y) ** 2)
        if len(points_list) == 1:
            final_distance = math.sqrt((points_list[-1][0] - current_x) ** 2 + (points_list[-1][1] - current_y) ** 2)
            if final_distance < last_point_tolerance:
                running = False
        elif distance_to_point < stop_threshold:  # Adjust the threshold as needed
            points_list.pop(0)  # Remove the reached point

        # Check if the robot has reached the last point
       

        # Set motor velocities
        left_drive_smart.set_velocity(left_velocity, PERCENT)
        left_drive_smart.spin(FORWARD)
        right_drive_smart.set_velocity(right_velocity, PERCENT)
        right_drive_smart.spin(FORWARD)
        #print("(" + str(current_x)+"," + str(current_y) + "),")

        wait(20, MSEC)

    # Stop motors when path is complete

    #print(dis_to_end)
    left_drive_smart.stop()
    right_drive_smart.stop()

def autonomous_sample(): 
    global current_x, current_y, current_angle
    print("Starting autonomous sample
    while True:
        update_position()
        print("x: "+ str(current_x)+" y: " + str(current_y) + " angle: " + str(current_angle))
        wait(1, SECONDS)

def autonomous_blue_right():
    autonomous_more_donuts_side(blue_right_tomogo, blue_right_tofirststack, blue_right_lasttwo, first_blue_right_4, blue_right_back_4, blue_right_totower)

def autonomous_red_left():
    autonomous_more_donuts_side(red_left_tomogo, red_left_tofirststack, red_left_lasttwo, first_red_left_4, red_left_back_4, red_left_totower)

def autonomous_red_right():
    global p1redight, p2redright, p3redright, p4redright, p7redright
    autonomous_more_donuts_side_modified(red_right_tomogo, red_right_tofirststack, red_right_lasttwo, first_red_right_4, red_right_back_4, red_right_totower)
    #autonomous_extra_mogo_side(p1redright, p2redright, p3redright, p4redright, p7redright)

def autonomous_blue_left():
    global p1blueleft, p2blueleft, p3blueleft, p4blueleft, p7blueleft
    autonomous_more_donuts_side(blue_left_tomogo, blue_left_tofirststack, blue_left_lasttwo, first_blue_left_4, blue_left_back_4, blue_left_totower)
    #autonomous_extra_mogo_side(p1blueleft, p2blueleft, p3blueleft, p4blueleft, p7blueleft)
def autonomous_red_right_6Points():
    global p1redright6Points, p2redright6Points, p3redright6Points, p4redright6Points
    autonomous_extra_mogo_side_6Points(p1redright6Points, p2redright6Points, p3redright6Points, p4redright6Points, p5redright6Points)
    
def autonomous_blue_left_6Points():
    global p1redright6Points, p2redright6Points, p3redright6Points, p4redright6Points
    autonomous_extra_mogo_side_6Points(p1redright6Points, p2redright6Points, p3redright6Points, p4redright6Points, p5redright6Points)

def autonomous_red_left_8points():
    global p1redleft8points, p2redleft8points, p3redleft8points, p4redleft8points, p5redleft8points, p6redleft8points, p7redleft8points, p8redleft8points
    autonomous_extra_ring_side_8points(p1redleft8points, p2redleft8points, p3redleft8points, p4redleft8points, p5redleft8points, p6redleft8points, p7redleft8points, p8redleft8points)

def autonomous_extra_ring_side_8points(p1redleft, p2redleft,  p3redleft, p4redleft, p5redleft, p6redleft, p7redleft, p8redleft):
    global intake_state, lookahead, tolerance,  high_score_target_angle
    lookahead = 50
    tolerance = 6
    mogo_p.set(False)
    high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
    adjust_high_scoring_motor_position()

    walk_path(p1redleft, lookahead, tolerance, -1)
    print("autonomous_red_right: before p1")
    mogo_p.set(True)
    wait(20, MSEC)
    intake_state = IntakeState.RUNNING
    set_intake_motor_state(REVERSE)
    wait(1000, MSEC)

    walk_path(p2redleft, lookahead, tolerance, 1)
    print("autonomous_red_right: before p2")

    walk_path(p3redleft, lookahead, tolerance, 1)
    print("autonomous_red_right: before p6")

    walk_path(p4redleft, lookahead, tolerance, 1)
    print("autonomous_red_right: before p7")
    wait(1000, MSEC)

    walk_path(p5redleft, lookahead, tolerance, -1)
    print("autonomous_red_right: before p6")

    walk_path(p6redleft, lookahead, tolerance, 1)
    print("autonomous_red_right: before p8")

    walk_path(p7redleft, lookahead, tolerance, 1)
    print("autonomous_red_right: END")

    walk_path(p8redleft, lookahead, tolerance, 1)
    print("autonomous_red_right: END")

def autonomous_extra_mogo_side_6Points(p1_6Points, p2_6Points, p3_6Points, p4_6Points, p5_6Points):
    global intake_state, lookahead, tolerance
    lookahead = 40
    tolerance = 6
    mogo_p.set(False)
    walk_path(p1_6Points, lookahead, tolerance, -1)
    print("autonomous_red_right: before p1")
    mogo_p.set(True)
    #high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
    #adjust_high_scoring_motor_position()
    wait(20, MSEC)
    intake_state = IntakeState.RUNNING
    set_intake_motor_state(REVERSE)
    wait(1000, MSEC)

        
    walk_path(p2_6Points, lookahead, tolerance, -1)
    print("autonomous_red_right: before p2")
    mogo_p.set(False)

    walk_path(p3_6Points, lookahead, tolerance, -1)
    print("autonomous_red_right: before p3")
    mogo_p.set(True)

    walk_path(p4_6Points, lookahead, tolerance, 1)
    print("autonomous_red_right: before p4")

    walk_path(p5_6Points, lookahead, tolerance, 1)
    print("autonomous_red_right: before p5")


def autonomous_extra_mogo_side(p1, p2, p3, p4, p7):
    global intake_state, lookahead, tolerance
    #confirm about tolerance and direction    
    lookahead = 50
    print("autonomous_red_right: before p1")  
    walk_path(p1, lookahead, tolerance, 1)
   
    walk_path(p2, lookahead, tolerance, -1)
    print("autonomous_red_right: before p2")
    mogo_p.set(True)
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
    adjust_high_scoring_motor_position()
    wait(10, MSEC)
    intake_state = IntakeState.RUNNING
    set_intake_motor_state(REVERSE)
    wait(1000, MSEC)
   
    walk_path(p3, lookahead, tolerance, 1)
    print("autonomous_red_right: before p3")
 
    walk_path(p4, lookahead, tolerance, 1)
    print("autonomous_red_right: before p4")
    mogo_p.set(False)
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_DOWN)
    adjust_high_scoring_motor_position()

    walk_path(p7, lookahead, tolerance, 1)
    print("autonomous_red_right: before p4")
   
    """walk_path(p5, lookahead, tolerance, 1)
    print("autonomous_red_right: before p6")
    wait(100, MSEC)
    donker.set(True)"""
   
    #walk_path(p6, lookahead, tolerance, 1)
   
    print("autonomous_red_right: before p7")
   
    """walk_path(p5, lookahead, tolerance, 1)
    print("autonomous_red_right: END")"""
       

def autonomous_more_donuts_side(tomogo, tofirststack, last_two, first_4, back_4, to_tower):
    global intake_state, lookahead, high_score_target_angle, tolerance, forward_velocity, turn_velocity_k

    # Bring up high scoring motor
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
    adjust_high_scoring_motor_position()

    lookahead = 50
    tolerance = 2
    # go to mogo
    walk_path(tomogo, lookahead, tolerance, -1)
    # Capture the mogo
    mogo_p.set(True)
    wait(100, MSEC)

    # start intake to pick up the top donut including the stall code
    intake_state = IntakeState.RUNNING
    set_intake_motor_state(REVERSE)

    # Bring down the intake to knock off the top donut
    update_position()
    print("autonomous_more_donuts_side: before tofirststack")
    walk_path(tofirststack, lookahead, tolerance, 1)
    update_position()
    lookahead = 20
    tolerance = 6
    print("autonomous_more_donuts_side: before last_two")
    walk_path(last_two, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: before first_4")
    update_position()
    lookahead = 50
    walk_path(first_4, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: before to_tower")
    back_reverse = back_4[::-1]
    print("autonomous_more_donuts_side: going back1")
    walk_path(back_4, lookahead, tolerance, -1)
    walk_path(back_reverse, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: going back2")
    walk_path(back_4, lookahead, tolerance, -1)
    walk_path(back_reverse, lookahead, tolerance, 1)
    walk_path(back_4, lookahead, tolerance, -1)
    # Bring up high scoring motor
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_DOWN)
    adjust_high_scoring_motor_position()
    intake_state = IntakeState.STOPPED
    set_intake_motor_state()
    walk_path(to_tower, lookahead, tolerance, 1)

def autonomous_more_donuts_side_modified(tomogo, tofirststack, last_two, first_4, back_4, to_tower):
    global intake_state, lookahead, high_score_target_angle, tolerance, forward_velocity, turn_velocity_k
    # Bring up high scoring motor
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
    adjust_high_scoring_motor_position()

    lookahead = 50
    tolerance = 2
    # go to mogo
    walk_path(tomogo, lookahead, tolerance, -1)
    # Capture the mogo
    mogo_p.set(True)
    wait(100, MSEC)

    # start intake to pick up the top donut including the stall code
    intake_state = IntakeState.RUNNING
    set_intake_motor_state(REVERSE)

    # Bring down the intake to knock off the top donut
    update_position()
    print("autonomous_more_donuts_side: before tofirststack")
    walk_path(tofirststack, lookahead, tolerance, 1)
    update_position()
    lookahead = 20
    tolerance = 6
    print("autonomous_more_donuts_side: before last_two")
    #walk_path(last_two, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: before first_4")
    update_position()
    lookahead = 50
    walk_path(first_4, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: before to_tower")
    back_reverse_first = back_4[::-1]
    back_reverse_second = back_4[::-1]
    back_4_first = back_4[:]
    back_4_second = back_4[:]
    back_4_third = back_4[:]
    print("autonomous_more_donuts_side: going back1")
    walk_path(back_4_first, lookahead, tolerance, -1)
    walk_path(back_reverse_first, lookahead, tolerance, 1)
    wait(300, MSEC)
    print("autonomous_more_donuts_side: going back2")
    walk_path(back_4_second, lookahead, tolerance, -1)
    walk_path(back_reverse_second, lookahead, tolerance, 1)
    wait(300, MSEC)
    walk_path(back_4_third, lookahead, tolerance, -1)
    # Bring up high scoring motor
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_DOWN)
    adjust_high_scoring_motor_position()
    intake_state = IntakeState.STOPPED
    set_intake_motor_state()
    turn_velocity_k = 40
    forward_velocity = 40
    walk_path(to_tower, lookahead, tolerance, 1)

# driver.py 
def valid_seen_object(seen_objects):
    # A placeholder to check if the objects array is valid
    if len(seen_objects) > 0:
        for obj in seen_objects:
            object_size = obj.width * obj.height
            #print("Detected object with size: " + str(object_size))
            if object_size > MIN_REJECT_SIZE:
                return True
    return False

BRIGHTNESS_THRESHOLD = 0
# Function to check the vision sensor
def check_vision_sensor():
    global eject_object
    if Color_sensor.brightness() > BRIGHTNESS_THRESHOLD:
        if eject_object == RingType.RED:
            if Color_sensor.color() == Color.RED:
               print("Ejecting Red")
               ejection_p.set(True)
            elif Color_sensor.color() == Color.BLUE:
               ejection_p.set(False)
        else:
            if eject_object == RingType.BLUE:
                if Color_sensor.color() == Color.BLUE:
                    #print("Ejecting Blue")
                    ejection_p.set(True)
                elif Color_sensor.color() == Color.RED:
                    ejection_p.set(False)

# Function to display joystick positions (optional)
def display_joystick_positions():
    brain.screen.clear_screen()
    brain.screen.set_cursor(1, 1)
    #joystick_positions = f"{int(controller_1.axis3.position())} {int(controller_1.axis2.position())}"
    #brain.screen.print(joystick_positions)
    wait(0.1, SECONDS)

def scale_joystick_input(input_value):
    # Normalize the input to the range [-1, 1]
    normalized_input = input_value / 100.0
    # Apply cubic scaling
    scaled_input = normalized_input ** 3
    # Scale back to the range [-100, 100]
    if slow_drive:
        return scaled_input * 90
    else:
        return scaled_input * 100

# Function to set drive motor velocities based on controller input
def set_drive_motor_velocities():
    global slow_drive
    if controller_1.buttonA.pressing():
        slow_drive = not slow_drive
        while controller_1.buttonA.pressing():
            wait(10, MSEC)

    # Normal control
    left_joystick_y = controller_1.axis3.position()
    right_joystick_y = controller_1.axis2.position()

    # Apply scaling to joystick inputs
    left_joystick_y = scale_joystick_input(left_joystick_y)
    right_joystick_y = scale_joystick_input(right_joystick_y)

    # Set velocities for left and right drive motors
    left_drive_smart.set_velocity(left_joystick_y, PERCENT)
    if abs(left_joystick_y) < 5:
        left_drive_smart.stop()
    else:
        left_drive_smart.spin(FORWARD)

    right_drive_smart.set_velocity(right_joystick_y, PERCENT)
    if abs(right_joystick_y) < 5:
        right_drive_smart.stop()
    else:
        right_drive_smart.spin(FORWARD)
        
# Function to toggle the high scoring motor
def toggle_high_scoring_motor():
    global high_scoring_running, high_score_target_angle
    if controller_1.buttonLeft.pressing():
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_SCORE)
        high_scoring_running = False
        while controller_1.buttonLeft.pressing():
            wait(10, MSEC)

    if controller_1.buttonUp.pressing():
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
        high_scoring_running = False
        while controller_1.buttonLeft.pressing():
            wait(10, MSEC)

    if controller_1.buttonRight.pressing():
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_CAPTURE)
        high_scoring_running = True
        while controller_1.buttonLeft.pressing():
            wait(10, MSEC)

    if controller_1.buttonDown.pressing():
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_DOWN)
        high_scoring_running = False
        while controller_1.buttonDown.pressing():
            wait(10, MSEC)

# Function to toggle the intake motor
def toggle_intake_motor():
    global intake_state
    global consecutive_stall_count, retry_count, high_score_stall
    global intake_running

    if controller_1.buttonR1.pressing():

        intake_state = IntakeState.RUNNING if intake_state == IntakeState.STOPPED else IntakeState.STOPPED
        consecutive_stall_count = 0
        retry_count = 0

        set_intake_motor_state(FORWARD)
        wait(100, MSEC)  # Debounce delay
        while controller_1.buttonR1.pressing():
            wait(100, MSEC)

    if controller_1.buttonR2.pressing():
        intake_state = IntakeState.RUNNING if intake_state == IntakeState.STOPPED else IntakeState.STOPPED
        consecutive_stall_count = 0
        retry_count = 0
        set_intake_motor_state(REVERSE)
        wait(100, MSEC)  # Debounce delay
        while controller_1.buttonR2.pressing():
            wait(100, MSEC)

# Function to handle digital outputs based on controller buttons
def handle_digital_outputs():
    if controller_1.buttonL1.pressing():
        print("Mogo 1")
        mogo_p.set(False)
    if controller_1.buttonL2.pressing():
        print("Mogo 2")
        mogo_p.set(True)
    if controller_1.buttonX.pressing():
        intake_p.set(not intake_p.value())
    if controller_1.buttonY.pressing():
        donker.set(True)
    if controller_1.buttonB.pressing():
        donker.set(False)

# Autonomous function
def autonomous():
    global eject_object, gyro
    # Autonomous code
    # For example, move forward for a certain distance
    # define a variable slot_no and switch case based on the slot_no
    # to run the corresponding autonomous routine
    #wait(3, SECONDS)
    slot_no = 2
    if slot_no == 1:
        eject_object = RingType.BLUE
        gyro.set_heading(180, DEGREES)
        autonomous_red_left_8points()
    elif slot_no == 2:
        gyro.set_heading(180, DEGREES)
        eject_object = RingType.BLUE
        autonomous_red_right_6Points()
    elif slot_no == 3:
        eject_object = RingType.NONE
        autonomous_blue_left()
    elif slot_no == 4:
        eject_object = RingType.RED
        autonomous_blue_right()
    elif slot_no == 5:
        eject_object = RingType.NONE
        autonomous_test()

    eject_object = RingType.NONE
    ejection_p.set(False)
    left_drive_smart.stop()
    right_drive_smart.stop()

# Driver control function
def drivercontrol():
    # Main control loop for driver control
    global eject_object
    eject_object = RingType.BLUE

    while True:
        set_drive_motor_velocities()
        toggle_high_scoring_motor()
        adjust_high_scoring_motor_position()
        toggle_intake_motor()
        check_vision_sensor()
        handle_digital_outputs()
        stall_detection_and_handling()

        wait(20, MSEC)

def stopIntake():
    wait(1.3, SECONDS)
    intake_lower.set_velocity(70, PERCENT)
    intake_upper.stop()


def autonomous_empty():
    left_drive_smart.set_velocity(95, PERCENT)
    right_drive_smart.set_velocity(95, PERCENT)
    left_drive_smart.spin(FORWARD)
    right_drive_smart.spin(FORWARD)
    wait(200, MSEC)
    left_drive_smart.stop()
    right_drive_smart.stop()

def autonomous_test():
    global lookahead, tolerance, increasing_x, test_square, intake_state, high_score_target_angle, test_circle, gyro, eject_object, forward_velocity, turn_velocity_k
    #walk_path(increasing_x, lookahead, tolerance, 1)
    
    #mogo_p.set(True)
    #wait(1, SECONDS)
    #high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
    #adjust_high_scoring_motor_position()
    #intake_state = IntakeState.RUNNING  
    #set_intake_motor_state(REVERSE)
    #gyro.set_heading(180, DEGREES)
    # Reverse the test_circle path
    # reversed_test_circle = test_circle[::-1]


    #walk_path(reversed_test_circle, lookahead, tolerance, 1)
    lookahead = 50
    forward_velocity = 45
    forward_velocity = 45
    wall_score_on = False
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
    adjust_high_scoring_motor_position()
    intake_state = IntakeState.RUNNING
    wait(100, MSEC)
    set_intake_motor_state(REVERSE)
    wait(1000, MSEC)

    if wall_score_on:
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_CAPTURE)
        adjust_high_scoring_motor_position()

    walk_path(alliance_stake, lookahead, tolerance, 1)
    only_test_3_4 = False
    if not only_test_3_4:
        print("alliance done with turning")
        walk_path(grabbing_mogo, lookahead, tolerance, -1)
        print("grabbing done with turning")
        mogo_p.set(True)
        wait(50, MSEC)

        if wall_score_on:
            # Left wall stake
            walk_path(wallStakeTestp1, lookahead, tolerance, 1)
    
            #intake_upper.stop()
            #high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
            #adjust_high_scoring_motor_position()
            walk_path(wallStakeTestp2, lookahead, tolerance, 1)
            intake_state = IntakeState.RUNNING
            set_intake_motor_state(FORWARD)
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
            adjust_high_scoring_motor_position()
            wait(300, MSEC)
            intake_state = IntakeState.RUNNING
            set_intake_motor_state(REVERSE)
            #walk_path(wallStakeTestp2part2, lookahead, tolerance, 1)
            wait(200, MSEC)
            forward_velocity = 10
            turn_velocity_k = 10
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_SCORE)
            adjust_high_scoring_motor_position()

            wait(400, MSEC)
            walk_path(wallStakeTestp3, 1, tolerance, -1)
            wait(600, MSEC)
            forward_velocity = 40
            turn_velocity_k = 40
            walk_path(wallStakeTestp4, lookahead, tolerance, -1)
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
            adjust_high_scoring_motor_position()
        else:
            # Left bottom corner
            walk_path(collect_left_bottom_rings, lookahead , tolerance, 1)
            print("done 8")
            walk_path(collect_left_bottom_rings2, lookahead , tolerance, 1)
            print("done 9")  
            walk_path(mogo_to_left_corner, lookahead, tolerance, -1)
        print("done 10")
        walk_path(mogo_to_left_corner2, lookahead, tolerance, -1)
        print("done 11")
        mogo_p.set(False)
        wait(50, MSEC)
        walk_path(corner_to_mogo, lookahead, tolerance, 1)
        print("done 6")
        walk_path(turn_to_mogo, lookahead, tolerance, -1)
        print("done 7")
        mogo_p.set(True)
        wait(50, MSEC)

        if wall_score_on:
            # Right wall score
            walk_path(rightwallStakeTestp1, lookahead, tolerance, 1)
        
            #intake_upper.stop()
            #high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
            #adjust_high_scoring_motor_position()
            walk_path(rightwallStakeTestp2, lookahead, tolerance, 1)
            intake_state = IntakeState.RUNNING
            set_intake_motor_state(FORWARD)
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
            adjust_high_scoring_motor_position()
            wait(300, MSEC)
            intake_state = IntakeState.RUNNING
            set_intake_motor_state(REVERSE)
            #walk_path(rightwallStakeTestp2part2, lookahead, tolerance, 1)
            wait(200, MSEC)
            forward_velocity = 10
            turn_velocity_k = 10
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_SCORE)
            adjust_high_scoring_motor_position()

            wait(400, MSEC)
            walk_path(rightwallStakeTestp3, 1, tolerance, -1)
            wait(600, MSEC)
            forward_velocity = 40
            turn_velocity_k = 40
            walk_path(rightwallStakeTestp4, lookahead, tolerance, -1)
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
            adjust_high_scoring_motor_position()
        else:
            #Right bottom corner
            walk_path(collect_right_bottom_rings, lookahead , tolerance, 1)
            print("done 8")

        walk_path(toprightmogo2_missing, lookahead , tolerance, 1)

        print("done 9") 

        walk_path(mogo_to_corner, lookahead, tolerance, -1)
        print("done 10")
        walk_path(mogo_to_corner2, lookahead, 1, -1, True)
        print("done 11")
        mogo_p.set(False)
        wait(50, MSEC)
        eject_object = RingType.NONE
        walk_path(mogo_in_right_top_corner1, lookahead, tolerance, 1)

    # 3rd and 4th start from here
    walk_path(mogo_in_right_top_corner2, lookahead, tolerance, -1, True)
    mogo_p.set(True)
    donker.set(True)

    if only_test_3_4:
        wait(1, SECONDS)

    intake_state = IntakeState.STOPPED
    set_intake_motor_state()
    intake_lower.set_velocity(100, PERCENT)
    intake_lower.spin(REVERSE)
    intake_upper.spin(REVERSE)
    intake_upper.set_velocity(40, PERCENT)
    ws2 = Thread( stopIntake )
    walk_path(top_right_doinker, lookahead, tolerance, 1)

    if only_test_3_4:
        wait(1, SECONDS)

    toprightmogocopy = toprightmogo1[:]
    walk_path(toprightmogo1, lookahead, tolerance, 1)
    
    print("done running with doinker")
    #intake_lower.set_velocity(100, PERCENT)
    #intake_upper.set_velocity(100, PERCENT)
    mogo_p.set(False)
    donker.set(False)
    walk_path(toprightmogo2, lookahead, 2, -1, True)
    print("done dropping mogo, going fwd the way we came in")

    if only_test_3_4:
        wait(1, SECONDS)

    walk_path(toprightmogocopy, lookahead, tolerance, 1)
    intake_lower.set_velocity(100, PERCENT)
    print("done 12")
    #walk_path(emptymogo1, lookahead, tolerance, 1)
    #print("done 13")

    if only_test_3_4:
        wait(5, SECONDS)

    walk_path(emptymogo2, lookahead, tolerance, -1)
    mogo_p.set(True)
    eject_object = RingType.BLUE
    donker.set(True)

    if not only_test_3_4:
        intake_upper.set_velocity(100, PERCENT)
        intake_state = IntakeState.RUNNING
        set_intake_motor_state(REVERSE)
        
        walk_path(emptymogo3, lookahead, tolerance, 1)
        walk_path(emptymogo4, lookahead, tolerance, 1)
        walk_path(topleftmogo2, lookahead, 2, -1, True)
        donker.set(False)
        mogo_p.set(False)
        
        wait(500, MSEC)
        intake_state = IntakeState.STOPPED
        set_intake_motor_state(REVERSE)
        walk_path(lastmogo, lookahead, tolerance, 1)
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_SCORE)
        adjust_high_scoring_motor_position()
        forward_velocity = 30
        turn_velocity_k = 30
        walk_path(passivehang, lookahead, tolerance, -1)
        forward_velocity = 15
        turn_velocity_k = 15
        walk_path(passivehangreverse, lookahead, tolerance, 1)

    
def unscoring():
    print("Hi")

    def gyro_test():
        global gyro
        while True:
            print(gyro.heading())
            wait(100, MSEC)

# Create a Competition object
#competition = Competition(drivercontrol, autonomous)
def main():
    # Any initialization code before the match starts
    print("Running main.py")
    wait(3, SECONDS)
    #mogo_p.set(False)
    #intake_p.set(True)
    #autonomous()
    autonomous_test()
    #drivercontrol()
    #autonomous()
    #intake_p.set(True)
    #drive
    #unscoring()
main()
